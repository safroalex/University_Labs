------------------------------------------------------------------
Design Software                   bspline(), bseval(), bsdcpnts(), 
                     bsplinit(), bsplend(), bsplmake(), bspldest()
------------------------------------------------------------------


1.0  Purpose.

     Interpolate or differentiate a set of  data  points  (x ,ty ), 
jt=t0 ... n-1, using a vector valued B-spline.  


2.0  How to use the functions.

     The function bspline() receives and returns  all  information 
via its formal arguments.  It is declared as
     
     int bspline (n, x, y, order, xbspl, ybspl, flag)
     int    n;
     double x[], y[];
     int    order;
     struct BSPLSTRC *xbspl, *ybspl;
     int    *flag;

If bspline() successfully computes the B-spline coefficients  then 
the interpolation function bseval() may be used.  It  is  declared 
as

     double bseval (index, u, bspldefn, flag)
     int    index;
     double u;
     struct BSPLSTRC *bspldefn

The routine bsdcpnts() may be used to define the B-spline that  is 
the derivative of the supplied  original  B-spline.   If  this  is 
successful, bseval() may  be  used  to  evaluate  the  derivative.  
bsdcpnts() is declared as

     int    bsdcpnts (orignl, deriv, flag)
     struct BSPLSTRC *orignl;
     struct BSPLSTRC *deriv;
     int    *flag;

The routine bsplinit() must be called prior to first  use  of  the 
routine bseval().  A call to  this  routine  should  not  be  made 
before the use of bspline().  It is declared as

     int    bsplinit (order, flag)
     int    order;
     int    *flag;

The routine bsplend() should be called when no further evaluations 
are to be made using the B-spline  definitions.   This  will  free 
work space associated with internal routines.  It is declared as

     int    bsplend ()

The routine bsplmake() is used to assemble a structure  containing 
the data required to define a B-spline.  It should not in  general 
be required by the user.  It is declared as

     int    bsplmake (order, nknot, knots, cpnts, bspldefn, flag)
     int    order;
     int    nknot;
     double knots[];
     double cpnts[];
     struct BSPLSTRC *bspldefn;
     int    *flag;

The routine bspldest() should be called when no further use  of  a 
particular B-spline is required.  A call to this routine will free 
memory used by the vectors within the B-spline structure.   It  is 
declared as

     int    bspldest (bspldefn, flag)
     struct BSPLSTRC *bspldefn;
     int    *flag;

2.1  Parameter types.

     n         : integer value
     x         : pointer to a vector of double values
     y         : pointer to a vector of double values
     order     : integer value
     xbspl     : pointer to a BSPLSTRC structure
     ybspl     : pointer to a BSPLSTRC structure
     flag      : pointer to an integer variable
     index     : integer value
     u         : double value
     bspldefn  : pointer to a BSPLSTRC structure
     orignl    : pointer to a BSPLSTRC structure
     deriv     : pointer to a BSPLSTRC structure
     nknot     : integer value
     knots     : pointer to a vector of double values
     cpnts     : pointer to a vector of double values

2.2  Input to bspline().

     n         : The number of data points.  These are numbered 
                 0 .. n-1.
     x         : vector of x values, x ,x , ... x
                 Note that these do not have to be monatonic.
     y         : vector of y values, y ,y , ... y
                 Note that these do not have to be monatonic.
     order     : order of the bspline to be fitted to the data.
                 Note that order < n.  A cubic spline,
                 (order = 4) usually gives satisfactory results.

2.3  Output from bspline().

     bspline   : value equivalent to flag.
     xbspl     : Structure  containing  the  definition  of the
                 B-spline interpolating the x values.
     ybspl     : Structure  containing  the  definition  of   the 
                 B-spline interpolating the y values.
     flag      : flag = 0, normal return.
                 flag = 1, Could not allocate memory for B-spline
                           evaluation routine.
                 flag = 2, could not allocate memory for 
                           workspace.
                 flag = 3, Parameter outside knot range.
                 flag = 4, Unable to factorize banded matrix.

2.4  Input to bseval().

     index     : Flag which can be used to minimize calculations
                 when the derivative(s) as well as the B-spline
                 value is required at a  parameter  value.   If  a
                 derivative calculation is made first, then
                 index = 2 can be used for the original spline.
                 Otherwise, index = 1.
     u         : Parameter value at which B-spline  coordinate  is
                 required.
     bspldefn  : Definition of the B-spline.

2.5  Output from bseval().

     bseval    : The value of the B-spline at u.
     flag      : flag = 0, normal return.
                 flag = 1, could not allocate memory for workspace.

2.6  Input to bsdcpnts().

     orignl    : B-spline for which the derivative (B-spline) is
                 required.

2.7  Output from bsdcpnts().

     bsdcpnts  : Value equivalent to flag.
     deriv     : The definition of the derivative spline.
     flag      : flag = 0, normal return.
                 flag = 1, could not allocate memory for 
                           structure arrays.

2.8  Input to bsplinit().

     order    : The order of the B-splines being evaluated.

2.9  Output from bsplinit().

     bsplinit  : Value equivalent to flag.
     flag      : flag = 0, normal return.
                 flag = 1, could not allocate memory for
                           workspace.

2.10  Input to bsplend().

     None.

2.11  Output from bsplend().

     bsplend   : The value 0.
                            
2.12  Input to bsplmake().

     order     : The order of the B-splines being evaluated.
     nknot     : The number of knots in the B-spline.
     knots[]   : The knot vector for the B-spline, of length
                 nknot.
     cpnts[]   : The n control points of the B-spline.

2.13  Output from bsplmake().

     bsplmake  : Value equivalent to flag.
     bspldefn  : The structure containing the B-spline data.
     flag      : flag = 0, normal return.
                 flag = 1, could not allocate memory for 
                           structure arrays.

2.14  Input to bspldest().

     bspldefn  : The structure containing the B-spline data.

2.15  Output from bspldest().

     bspldest  : value equivalent to flag.
     flag      : flag = 0, normal return.
                 flag = 1, NULL pointer for structure arrays.


3.0  Method.

     The piecewise polynomial B-splines are defined as
     P(u) =   P  B   (u),  
where 
     B   (u) = {    

     B   (u) = ---------  B     (u) + -------------  B       (u)

A set of simultaneous equations in u are set  up  using  the  node 
points of the knot vector, with the second and  second  last  data 
points  located  within  the  first  and  last  B-spline  segments 
respectively ("not a knot" condition).  A non-uniform knot  vector 
is used.


4.0  References.

C. de Boor.  "A Practical Guide to Splines."  Applied Mathematical 
Sciences Volume 27.  Springer-Verlag, New York.  1978.

C. de Boor.  "On Calculating with B-splines."  J Approx Theory.  6 
(1972) pp50-62.

P.J. Hartley, C.J. Judd:  "Parametrization of Bezier-type B-spline 
Curves and Surfaces.:  CAD Vol 10 Number 2 March 1978.

P.J. Hartley, C.J. Judd:  "Parametrization and Shape  of  B-spline 
Curves for CAD."  CAD Vol 12 Number 5 September 1980.


5.0  Example.

     Fit a set of B-splines to yt=te , xt=t0.0, 0.1, ...  1.0  and 
evaluate the B-splines and their derivatives at a number of sample 
points.

/*  bsplined.c
    Sample driver for B-spline fitting routine bspline().  */

#include  <stdio.h>
#include  <math.h>
#include  <stdlib.h>
#include  "cmath.h"

/*  Order of B-splines.  Must be <= number of data points.  */
#define  ORDER  4

main ()  /*  Beginning of program bsplined.c */
{
#define  ndim 11

int     i, j, left, flag, index, n;
double  temp_float, x[ndim], y[ndim];
double  param, deltaparam, xcoord, ycoord;
struct  BSPLSTRC  xbspl, ybspl, xdbspl, ydbspl;
double  dxdu, dydu;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample driver for bspline(), bseval(), bsdcpnts().\n\n");
printf ("Fit a spline to f(x) = exp (x), x = 0, 0.1,  ... 1.0\n");

n = 11;
temp_float = 1.0 / (double) (n-1);
x[0] = 0.0;  y[0] = 1.0;
for (i = 1; i < n; ++i)
   {
   x[i] = x[i-1] + temp_float;
   y[i] = exp (x[i]);
   }

/*  Solve for the control points of a B-spline of order ORDER.  */
bspline (n, x, y, ORDER, &xbspl, &ybspl, &flag);
printf ("%s\n\n", cmathmsg (BSPLINE_C, flag));

for ( i = 0 ; i  < n ;  i ++)
   printf ("xdata %8.3lf -> xcp %8.3lf,  ydata %8.3lf -> ycp %8.3lf\n",
            x[i], xbspl.cpnts[i],  y[i], ybspl.cpnts[i]);
/*  Set up static local memory for bsplvb().  */
bsplinit (ORDER, &flag);
index = 1;
param = 0.0;
deltaparam = (double) (xbspl.knots[xbspl.nknot-1]) / (double) (n - 1);
bsdcpnts (&xbspl, &xdbspl, &flag);
bsdcpnts (&ybspl, &ydbspl, &flag);
printf ("\nParameter     x       dx/du       y       dy/du      dydx   \n");
printf ("------------------------------------------------------------\n");
for (j = 1; j <= n; j++)  {
   xcoord = bseval (index, param, &xbspl, &flag);
   dxdu = bseval (index, param, &xdbspl, &flag);

   ycoord = bseval (index, param, &ybspl, &flag);
   dydu = bseval (index, param, &ydbspl, &flag);

   printf ("%8.3lf  %8.3lf  %8.3lf  %8.3lf  %8.3lf  %8.3lf\n",
            param, xcoord, dxdu, ycoord, dydu, dydu/dxdu);
   param = param + deltaparam;
}
bsplend ();
bspldest (&xbspl, &flag);  bspldest (&ybspl, &flag);
bspldest (&xdbspl, &flag); bspldest (&ydbspl, &flag);

return (0);
}  /*  End of program bsplined.c */


6.0  Example.

  --- CMATH --- Design Software 1989

Sample driver for bspline(), bseval(), bsdcpnts().

Fit a 4th order spline to f(x) = exp (x), x = 0, 0.1,  ... 1.0
bspline () : normal return.

Data points and corresponding control points.

xdata    0.000 -> xcp   -0.000,  ydata    1.000 -> ycp    1.000
xdata    0.100 -> xcp    0.127,  ydata    1.105 -> ycp    1.130
xdata    0.200 -> xcp    0.204,  ydata    1.221 -> ycp    1.226
xdata    0.300 -> xcp    0.300,  ydata    1.350 -> ycp    1.348
xdata    0.400 -> xcp    0.401,  ydata    1.492 -> ycp    1.491
xdata    0.500 -> xcp    0.501,  ydata    1.649 -> ycp    1.648
xdata    0.600 -> xcp    0.601,  ydata    1.822 -> ycp    1.821
xdata    0.700 -> xcp    0.702,  ydata    2.014 -> ycp    2.015
xdata    0.800 -> xcp    0.797,  ydata    2.226 -> ycp    2.219
xdata    0.900 -> xcp    0.875,  ydata    2.460 -> ycp    2.387
xdata     1.00 -> xcp    1.000,  ydata    2.718 -> ycp    2.718

Parameter     x       dx/du       y       dy/du      dydx   
------------------------------------------------------------
   0.000    -0.000     3.915      1.00     4.028     1.029
   0.100     0.201     1.044     1.223     1.303     1.249
   0.200     0.298     0.927     1.347     1.242     1.340
   0.300     0.389     0.889     1.476     1.313     1.477
   0.400     0.475     0.831     1.608     1.336     1.608
   0.500     0.556     0.784     1.743     1.367     1.743
   0.600     0.632     0.745     1.881     1.398     1.878
   0.700     0.704     0.683     2.021     1.391     2.037
   0.800     0.771     0.670     2.162     1.443     2.152
   0.900     0.845     0.958     2.327     2.233     2.330
   1.000     1.000     2.332     2.718     6.167     2.644
