------------------------------------------------------------------
Design Software                                              fft()
------------------------------------------------------------------


1.0  Purpose.

     Compute the discrete Fourier transform of a complex array
z  = zr  + i zi , k = 0 ... N-1, i  = -1.  The  forward  transform 
is defined as
     Z(n) = ------   S   z  . e             ,
while the inverse transform is defined as
     z(k) = ------   S   Z  . e             .
Note that N must be an integer power of 2.


2.0  How to use the function.

     The function fft() receives all information  via  its  formal 
arguments.  It is declared as 
     
     int fft (n, zr, zi, direct, flag)
     int    n;
     double zr[], zi[];
     int direct, *flag;


2.1  Parameter types.

     n         : integer value
     zr        : pointer to a vector of double values
     zi        : pointer to a vector of double values
     direct    : integer value
     flag      : pointer to an integer variable


2.2  Input.

     n         : The number of elements in z (N).  n must be
                 an integer power of two and less than 2  .
     zr[]      : The real part of the complex array.
                 zr[k], k = 0 ... n-1.
     zi[]      : The imaginary part of the complex array.
                 zi[k], k = 0 ... n-1.
     direct    : The direction of the transformation.
                 = +1, forward transform computed.
                 = -1, inverse transform computed.


2.3  Output.

     fft()     : returns an unspecified integer value which
                 should be ignored.
     zr[]      : The real part of the transformed array.
     zi[]      : The imaginary part of the transformed array.
                 The ordering of the z arrays are as follows...
                 index   time domain   frequency domain
                   k           t =             f =
                 -----------------------------------------
                   0              0                0
                   1              D             1/ND
                   2             2D             2/ND
                   ...
                   N/2-1   (N/2-1)D       (N/2-1)/ND
                   N/2       (N/2)D            +1/ND
                   N/2+1   (N/2+1)D      -(N/2-1)/ND
                   ...
                   N-2       (N-2)D            -2/ND
                   N-1       (N-1)D            -1/ND
                 -----------------------------------------
     flag      : A status indicator.
                 flag = 0, normal return
                 flag = 1, invalid user input. e.g. n < 2, 
                           n > 2  , zr == NULL, zi == NULL. 
                 flag = 2, n not an integer power of 2.
                 flag = 3, direct not +1 or -1.


3.0  Method.

     fft() uses the Cooley-Tukey fast Fourier transform  algorithm 
as described in Press et al.  The arrays are first arranged in bit 
reverse order and then the Danielson-Lanczos formula  is  applied.  
The computed result for both the forward and reverse transform  is 
scaled by sqrt(N).


4.0  Reference

W.H.  Press,  B.P.Flannery,  S.A.  Teukolsky   &   W.T.Vetterling: 
"Numerical Recipes.  The art of scientific computing.",  Cambridge 
University Press, 1986.


5.0  Example.

     Transform the time sequence 
     z  = sin(2pj/N) + i 0.0,  j = 0 ... N-1, N = 32.
then take the inverse transform and compute the accumulated error.


/* fftd.c
   Exercise the Fast Fourier transform routine.   */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
int    j, n, flag, direct;
#define  ndim  64
static double zr[ndim], zi[ndim];
static double rr[ndim], ri[ndim];
double rmax, rmean, t;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise Fourier transform routine fft().\n");

printf ("\nTime domain data ...\n");
n = 32;
for (j = 0; j < n; ++j)
   {
   zr[j] = sin (6.283185 * ((double) j) / ((double) n));
   zi[j] = 0.0;
   rr[j] = zr[j];  ri[j] = zi[j];
   printf ("(%6.3f,%6.3f), ", zr[j], zi[j]);
   if (j % 4 == 0) printf ("\n");
   }
printf ("\n");

printf ("\nForward transform ...\n");
direct = 1;
fft (n, zr, zi, direct, &flag);
printf ("%s\n\n", cmathmsg(FFT_C, flag));

if (flag == 0)
   {
   for (j = 0; j < n; ++j)
      {
      printf ("(%6.3f,%6.3f), ", zr[j], zi[j]);
      if (j % 4 == 0) printf ("\n");
      }
   printf ("\n");

   printf ("\nInverse transform ...\n");
   direct = -1;
   fft (n, zr, zi, direct, &flag);
   printf ("%s\n\n", cmathmsg(FFT_C, flag));
   rmax  = 0.0;
   rmean = 0.0;
   for (j = 0; j < n; ++j)
      {
      rr[j] -= zr[j];  ri[j] -= zi[j];
      t = fabs(rr[j]);
      rmax = (t > rmax) ? t : rmax; rmean += t;
      t = fabs(ri[j]);
      rmax = (t > rmax) ? t : rmax; rmean += t;
      }
   rmean /= (double) n;
   printf ("Maximum error = %10.2e\n", rmax);
   printf ("Mean error    = %10.2e\n", rmean);
   printf ("\n");
   }

return (0);
}  /* end of fftd.c */


6.0  Program Results.


  --- CMATH --- Design Software 1989

Exercise Fourier transform routine fft().

Time domain data ...
( 0.000, 0.000), 
( 0.195, 0.000), ( 0.383, 0.000), ( 0.556, 0.000), ( 0.707, 0.000), 
( 0.831, 0.000), ( 0.924, 0.000), ( 0.981, 0.000), (  1.00, 0.000), 
( 0.981, 0.000), ( 0.924, 0.000), ( 0.831, 0.000), ( 0.707, 0.000), 
( 0.556, 0.000), ( 0.383, 0.000), ( 0.195, 0.000), ( 0.000, 0.000), 
(-0.195, 0.000), (-0.383, 0.000), (-0.556, 0.000), (-0.707, 0.000), 
(-0.831, 0.000), (-0.924, 0.000), (-0.981, 0.000), ( -1.00, 0.000), 
(-0.981, 0.000), (-0.924, 0.000), (-0.831, 0.000), (-0.707, 0.000), 
(-0.556, 0.000), (-0.383, 0.000), (-0.195, 0.000), 

Forward transform ...
fft() : normal return

( 0.000, 0.000), 
(-0.000, 2.828), ( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), 
( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), 
( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), 
( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), 
( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), 
( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), 
( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), 
( 0.000,-0.000), ( 0.000,-0.000), (-0.000,-2.828), 

Inverse transform ...
fft() : normal return

Maximum error =    3.3e-16
Mean error    =    2.0e-16




