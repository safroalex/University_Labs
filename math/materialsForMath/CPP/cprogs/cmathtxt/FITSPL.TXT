------------------------------------------------------------------
Design Software                                           fitspl()
------------------------------------------------------------------


1.0  Purpose.

     Compute a  least-squares  cubic-spline  approximation  to  an 
arbitrary set of data points.  The x-positions of the spline knots 
are specified by the user while the y-positions of the  knots  and 
the end slopes of the spline are fitted to the  data  by  directly 
minimizing the merit function
     f =  S  w  (y (x ) - y )    ,
where y (x) is the cubic-spline approximation and w  is  a  weight 
assigned to data point k.


2.0  How to use the function.

     fitspl() is declared as 
     
     int fitspl (nd, x, y, w, ns, xs, ys, s1, s2, sums, flag)
     int    nd;
     double x[], y[], w[];
     int    ns;
     double xs[], ys[], *s1, *s2, *sums;
     int    *flag;

Once the optimum values for  the  y-coordinates  are  fitted,  the 
functions spline()  and  seval()  may  be  used  to  evaluate  the 
cubic-spline for any value of x.


2.1  Parameter types.

     nd        : integer value
     x         : pointer to a vector of double values
     y         : pointer to a vector of double values
     w         : pointer to a vector of double values
     ns        : integer value
     xs        : pointer to a vector of double values
     ys        : pointer to a vector of double values
     s1        : pointer to a double variable
     s2        : pointer to a double variable
     sums      : pointer to a double variable
     flag      : pointer to an integer variable


2.2  Input.

     nd        : The number of data points.  These are numbered
                 0 ... nd-1.
     x         : x-coordinates of the data points.  There is no
                 particular order required.
     y         : y-coordinates of the data points.
     w         : User assigned weights for the data.  The weight
                 should be inversely proportional to the square
                 of the absolute error of the y[k].  This error
                 could be specified as standard deviations.  If
                 error estimates are not available, just set all
                 weights to 1.
     ns        : Number of knots in the spline.  These are 
                 numbered 0 ... ns-1 and include the end points.  
                 If you are not sure how many knots to use, start 
                 with small ns and monitor the returned value of
                 sums as ns is sequentially increased by 1.  Use 
                 the value of ns that provided the last 
                 significant decrease in sums.  In general, it is 
                 better to keep ns small.
     xs        : x-coordinates of the spline knots.  These must
                 be in ascending order x[j-1] < x[j], j=1..ns-1.
                 If you have some idea of the expected form of the 
                 curve, then the knots should be bunched together 
                 in regions of high curvature.  Otherwise, equally 
                 spaced knots are often a good starting point.
     ys        : An initial guess for the y-coordinates of the 
                 spline knots.
     s1        : An initial guess for the slope at xs[0].
     s2        : An initial guess for the slope at xs[ns-1].
     sums      : The precision to which the minimum of the merit
                 function should be found.


2.3  Output.

     fitspl    : returns an unspecified integer value which should
                 be ignored.
     ys        : The fitted y-coordinates of the knots.
     s1        : The fitted slope at xs[0].
     s2        : The fitted slope at xs[ns-1].
     sums      : The sum of the squares of the residuals.
     flag      : A status indicator.
                 flag = 0 : normal return
                 flag = 1 : illegal value for nd, ns
                            (i.e. nd < 1, ns < 2)
                 flag = 2 : xs[] values are not in ascending
                            order
                 flag = 3 : not all of the weights are positive
                 flag = 4 : could not allocate memory for
                            workspace
                 flag = 5 : function minimizer did not converge.
                    This flag value does not necessarily indicate 
                    a poor fit.


2.4  Workspace.

     fitspl() allocates  a  work  space  of  (3*ndt+tns+2)  double 
elements while conjgg(), which is called by fitspl(), allocates  a 
further 4n double elements.


3.0  Method.

     The  function  fitspl()  attempts  to  fit  a  cubic   spline 
approximation to the  data  points  by  formulating  an  objective 
function as the sum of the squares  of  the  residuals.   It  then 
calls conjgg() to minimize this objective function.  Although this 
is an expensive way of fitting  a  spline  when  compared  to  the 
direct methods, it is robust and may be  easily  modified  to  use 
different measures of fit, or optimize some parts  of  the  spline 
while keeping others parts fixed.


4.0  Reference.

S. Wold : "Spline  functions  in  data  analysis."  Technometrics, 
16(1), 1-11 (1974).


5.0  Example.

     The following sample program fits a spline to the set of data 
points contained in the arrays x[] and y[].  The  result  produced 
by this program can be compared  with  the  polynomial  fitted  by 
fitpoly().

/* fitspld.c
   Sample driver for spline fitting routine fitspl().
   */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
int    i, flag, last;
double sums, yy;
#define  nd  28
double x[nd], y[nd], w[nd];
#define  ns  6
double xs[ns], ys[ns], b[ns], c[ns], d[ns];
double s1, s2;

/* Data points, (x, y) and weight */

x[0] = 0.20;  x[1] = 0.34;  x[2] = 0.47;  x[3] = 0.60;
x[4] = 0.74;  x[5] = 0.90;  x[6] = 1.09;  x[7] = 1.32;
x[8] = 1.60;  x[9] = 1.70;  x[10] = 1.90; x[11] = 2.25;
x[12] = 2.60; x[13] = 2.95; x[14] = 3.10; x[15] = 3.65;
x[16] = 4.00; x[17] = 4.66; x[18] = 5.15; x[19] = 5.64;
x[20] = 6.17; x[21] = 7.00; x[22] = 8.00; x[23] = 9.00;
x[24] = 10.0; x[25] = 11.0; x[26] = 12.0; x[27] = 13.0;

y[0] = 0.00;  y[1] = 1.00;  y[2] = 2.00;  y[3] = 3.00;
y[4] = 4.00;  y[5] = 5.00;  y[6] = 6.00;  y[7] = 7.00;
y[8] = 8.00;  y[9] = 8.24;  y[10] = 8.62; y[11] = 9.00;
y[12] = 9.10; y[13] = 9.00; y[14] = 8.90; y[15] = 8.50;
y[16] = 8.15; y[17] = 7.50; y[18] = 7.00; y[19] = 6.50;
y[20] = 6.00; y[21] = 5.30; y[22] = 4.54; y[23] = 3.89;
y[24] = 3.39; y[25] = 2.96; y[26] = 2.56; y[27] = 2.20;

w[0] = 0.20;   w[1] = 0.20;   w[2] = 0.20;   w[3] = 0.20;
w[4] = 0.30;   w[5] = 0.50;   w[6] = 0.70;   w[7] = 0.80;
w[8] = 0.90;   w[9] = 1.00;   w[10] = 1.00;  w[11] = 1.00;
w[12] = 1.00;  w[13] = 1.00;  w[14] = 1.00;  w[15] = 0.90;
w[16] = 0.80;  w[17] = 0.70;  w[18] = 0.50;  w[19] = 0.60;
w[20] = 0.70;  w[21] = 0.90;  w[22] = 1.00;  w[23] = 1.00;
w[24] = 1.00;  w[25] = 1.00;  w[26] = 1.00;  w[27] = 1.00;

/* Spline knots and end slopes. */

xs[0] = 0.20;  xs[1] = 1.50;  xs[2] = 2.60;  xs[3] = 4.00;
xs[4] = 8.00;  xs[5] = 13.0;
ys[0] = 0.00;  ys[1] = 8.00;  ys[2] = 9.10;  ys[3] = 8.15;
ys[4] = 4.54;  ys[5] = 2.20;
s1 = 7.14;
s2 = -0.36;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nTest program for fitspl().\n");

sums = 1.0e-4;
fitspl (nd, x, y, w, ns, xs, ys, &s1, &s2, &sums, &flag);
printf ("%s\n", cmathmsg(FITSPL_C, flag));

if (flag == 0 || flag == 5)
   {
   printf ("\nFitted spline ...\n");
   printf ("    i       xs[i]       ys[i]\n");
   printf ("---------------------------------\n");

   for (i = 0; i < ns; ++i)
      printf ("%5d  %10.3f  %10.3f\n", i, xs[i], ys[i]);
   printf ("\nslope at x[%d] = %10.5f\n", 0, s1);
   printf ("slope at x[%d] = %10.5f\n", ns, s2);

   printf ("\n    i     x[i]      y[i]      w[i]     spline\n");
   printf ("------------------------------------------------\n");
   spline (ns, 1, 1, s1, s2, xs, ys, b, c, d, &flag);
   if (flag != 0)
      printf ("%s\n", cmathmsg(SPLINE_C, flag));
   else
      {
      last = 1;
      for (i = 0; i < nd; ++i)
         {
         yy = seval(ns, x[i], xs, ys, b, c, d, &last);
         printf ("%5d %9.3f %9.3f %9.3f %9.3f\n",
                 i, x[i], y[i], w[i], yy);
         }
      }

   printf ("\nWeighted sum of residuals = %10.2e\n", sums);
   }

return (0);
}


6.0  Program Results.

  --- CMATH --- Design Software 1989

Test program for fitspl().
fitspl() : normal return

Fitted spline ...
    i       xs[i]       ys[i]
---------------------------------
    0       0.200      -0.084
    1       1.500       7.682
    2       2.600       9.093
    3       4.000       8.140
    4       8.000       4.525
    5      13.000       2.195

slope at x[0] =    8.51900
slope at x[6] =   -0.38525

    i     x[i]      y[i]      w[i]     spline
------------------------------------------------
    0     0.200     0.000     0.200    -0.084
    1     0.340     1.000     0.200     1.073
    2     0.470     2.000     0.200     2.083
    3     0.600     3.000     0.200     3.029
    4     0.740     4.000     0.300     3.974
    5     0.900     5.000     0.500     4.958
    6     1.090     6.000     0.700     5.989
    7     1.320     7.000     0.800     7.031
    8     1.600     8.000     0.900     7.981
    9     1.700     8.240     1.000     8.237
   10     1.900     8.620     1.000     8.631
   11     2.250     9.000     1.000     9.008
   12     2.600     9.100     1.000     9.093
   13     2.950     9.000     1.000     9.000
   14     3.100     8.900     1.000     8.919
   15     3.650     8.500     0.900     8.482
   16     4.000     8.150     0.800     8.140
   17     4.660     7.500     0.700     7.482
   18     5.150     7.000     0.500     6.998
   19     5.640     6.500     0.600     6.524
   20     6.170     6.000     0.700     6.027
   21     7.000     5.300     0.900     5.297
   22     8.000     4.540     1.000     4.525
   23     9.000     3.890     1.000     3.896
   24    10.000     3.390     1.000     3.385
   25    11.000     2.960     1.000     2.956
   26    12.000     2.560     1.000     2.572
   27    13.000     2.200     1.000     2.195

Weighted sum of residuals =    8.8e-03



