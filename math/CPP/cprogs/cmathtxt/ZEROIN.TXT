------------------------------------------------------------------
Design Software                                           zeroin()
------------------------------------------------------------------


1.0  Purpose.

     Solve f(x)t=t0, where f(x) is a user defined  function.   The 
function f(x) may be nonlinear.


2.0  How to use the function.

     The function zeroin() receives all information via its formal 
arguments and returns a double value  for  the  solution.   It  is 
declared as 
     
     double zeroin (left, right, f, tol, flag)
     double left, right, (*f)(), tol;
     int    *flag;


2.1  Parameter types.

     f         : pointer to a function returning a double value
                 double f (x)
                 double x;
                 {
                 ...
                 return (double value);
                 }
     left      : double value
     right     : double value
     tol       : double value
     flag      : pointer to an integer variable


2.2  Input.

     f         : The name of the user defined function f(x).
     left      : The left end-point of the initial interval.
     right     : The right end-point of the initial interval.
                 If an interval is specified that does not contain
                 an odd number of zeros, zeroin() will attempt
                 to find such an interval.
     tol       : The absolute error tolerance for x. (tol > 0.0).


2.3  Output.

     zeroin()  : returns the value of x approximating a zero of 
                 f(x).  If the initial interval did not contain an
                 odd zero, then x may be outside that interval. 
     flag      : A status indicator.
                 flag = 0, normal return
                 flag = 1, could not bracket an odd number of 
                           zeros
                 flag = 2, tol < 0.


3.0  Method.

     If necessary, zeroin() attempts to bracket  an  odd  root  by 
first  subdividing  the  initial  interval.   If   that   is   not 
successful,  it  then  attempts  to  extend  the  interval.   This 
bracketing process is  easily  fooled,  so  don't  depend  on  it.  
zeroin() then updates the solution guess using  inverse  quadratic 
interpolation or linear  interpolation  or,  if  all  else  fails, 
bisection.  If an  odd  root  is  bracketed,  then  zeroin()  will 
converge.


4.0  Reference

G.E. Forsythe, M.A. Malcolm, & C.B. Moler  : "Computer Methods for 
Mathematical Computations". Prentice-Hall, Englewood Cliffs,  N.J. 
1977.

T.J. Dekker : "Finding  a  zero  by  means  of  successive  linear 
interpolation." in  B.  Dejon  &  P.  Henrici  (eds)  Constructive 
Aspects of the Fundamental Theorem of Algebra, Wiley Interscience, 
New York 1969.

R.P. Brent : "Algorithms for  minimization  without  derivatives." 
Prentice-Hall, Englewood Cliffs, N.J. 1973.


5.0  Example.

     Solve  sin(-)t=t0 for x  in  the  interval  [0.3,t0.4].   The 
bracketing may be exercised  by  selecting  a  different  starting 
guess.

/* zeroind.c
   sample driver for nonlinear function solver zeroin() */

#include <stdio.h>
#include <math.h>
#include "cmath.h"

main ()
{
int    flag;
double x1, x2, solution, toler;
double f();

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the nonlinear function solver zeroin()\n");

x1    = 0.3;
x2    = 0.4;
toler = 1.0e-10;

solution = zeroin (x1, x2, f, toler, &flag);
printf ("\n%s\n", cmathmsg(ZEROIN_C, flag));

printf ("Computed solution = %12.8f\n", solution);
printf ("Expected solution =   0.31830989\n");

return (0);
}


double f(x)
double x;
{
double y;
/* y = x * (x * x - 2.0) - 5.0; */
y = sin (1.0 / x);
return (y);
}


6.0  Program Results.

  --- CMATH --- Design Software 1989

Exercise the nonlinear function solver zeroin()

zeroin() : normal return
Computed solution =   0.31830989
Expected solution =   0.31830989



