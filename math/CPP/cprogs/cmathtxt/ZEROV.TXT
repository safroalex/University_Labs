------------------------------------------------------------------
Design Software                                            zerov()
------------------------------------------------------------------


1.0  Purpose.

     Solve f(x)t=t0, where f(x) is a set of simultaneous nonlinear 
(or trancendental) functions of a vector x.


2.0  How to use the function.

     The function zerov() receives all information via its  formal 
arguments.  It is declared as 
     
     int zerov (f, jac, n, x, fvec, xtol, ftol, mf, nfe, flag)
     int    (*f)(), (*jac)(), n;
     double x[], fvec[], xtol, ftol;
     int    mf, *nfe, *flag;


2.1  Parameter types.

     f         : pointer to an integer function
                 int f (n, x, fvec)
                 int    n;
                 double x[], fvec[];
                 {
                 int i;
                 fvec[i] = ...
                 return (0);
                 }
     jac       : pointer to an integer function
                 int jac (n, x, df)
                 int    n;
                 double x[], df[];
                 {
                 int i, j;
                 df[i*n+j] = ...
                 return (0);
                 }
     n         : integer value
     x         : pointer to a vector of double values
     fvec      : pointer to a vector of double values
     xtol      : double value
     ftol      : double value
     mf        : integer value
     nfe       : pointer to an integer variable
     flag      : pointer to an integer variable


2.2  Input.

     f         : The name of the user defined function f(x).  The
                 functions should be scaled so that elements of x
                 and f are all order(1).
     n         : The number of equations (and elements in x[]).
     x         : An initial guess for the solution.
     ftol      : The absolute error tolerance for f.  
                 For mf < 0, the user should not specify too 
                 small a value for ftol.
                 For mf > 0, the Newton-Raphson iteration is
                 stopped if the sum of the absolute values of
                 f becomes less than ftol.
     xtol      : For mf > 0, the Newton-Raphson iteration is
                 stopped if the sum of the absolute values of
                 the x-step becomes less than xtol.
     mf        : Method flag.
                 mf = -1, Use function minimizer nelmin().  This
                    is useful for a start or where the Jacobian
                    behaves badly.  However, it is expensive 
                    and converges slowly.
                 mf = -2, Use function minimizer conjgg().  
                    conjgg() is generally more efficient than
                    nelmin() but requires well behaved functions.
                 mf = 1, Newton-Raphson iteration with a user
                    supplied Jacobian.  A good guess for x is
                    required.
                 mf = 2, Newton-Raphson iteration using a
                    Jacobian approximated by finite-differences.
                    The user supplied function for evaluation
                    of the Jacobian must be present but need not
                    do anything.
     nfe       : The maximum number of function evaluations
                 allowed.  Notes: (1) When mf = 2, each 
                 evaluation of the Jacobian requires n function
                 evaluations.  (2) When mf = -2, nfe is ignored
                 but the number of linear searches performed by
                 conjgg() is restricted to 5n with a maximum of 
                 100 function evaluations per search.


2.3  Output.

     zerov()   : returns an unspecified integer value which should
                 be ignored.
     x         : An approximation the the solution vector.   When
                 mf < 0, there is no guarantee that x is close to
                 a solution as the function minimizer may have 
                 found a local but unrelated minimum in its
                 objective function.  If the solution looks 
                 promising, call zerov() again to improve the
                 solution using Newton-Raphson iteration.
     fvec      : The function residuals at x.
     nfe       : The number of function evaluations used.
     flag      : A status indicator.
                 flag = 0 : normal return
                 flag = 1 : illegal value for n (e.g. n < 1, 
                            x == NULL, fvec == NULL, xtol < 0.0,
                            ftol < 0.0, mf < 0, mf > 2, 
                            nfe == NULL, mf != 1, 2, -1, -2.
                 flag = 2 : could not allocate memory for
                            workspace
                 flag = 3 : function minimizer failed.  It could
                            not converge to a minimum in the
                            allowed number of steps.
                 flag = 4 : The minimizer found a local minimum
                            but x is not a solution to the user
                            specified precision.
                 flag = 5 : Newton-Raphson scheme diverging.
                 flag = 6 : Singular Jacobian.


2.4  Workspace.

     If mf = -1, zerov() allocates a vector of n double  elements 
while nelmin() (which is called by zerov())  allocates  a  further 
n * (n + 6) double elements.

     If mf = -2, zerov() allocates a vector of n  double  elements 
while conjgg() allocates a further 4n double elements.

     If mf = 1, zerov() allocates n * (n+1) double elements and  n 
integer elements, while decomp()  allocates  a  further  n  double 
elements.

     If mf = 2, zerov() allocates n * (n+2) double elements and  n 
integer elements, while decomp()  allocates  a  further  n  double 
elements.


3.0  Method.

     If mf < 0, the function zerov() attempts to solve the set  of 
simultaneous equations by formulating an objective function as the 
L1 norm of the function residuals.  It then calls either  nelmin() 
or conjgg() to minimize this function.  This is an  expensive  way 
of solving the equations when compared to using  a  Newton-Raphson 
iteration, however, it  is  robust  and  is  often  a  good  first 
approach.  It is especially useful for cases  where  the  Jacobian 
for f(x) is not available or is badly behaved.

     If mf > 1, zerov() attempts to solve  the  set  of  equations 
using  Newton-Raphson  iteration.   The  initial  guess  for   the 
solution needs to be close to the actual solution.  If mf = 2, the 
Jacobian used in the iteration  is  approximated  using  one-sided 
finite-differences.


4.0  Reference

     Most numerical analysis  texts  have  a  description  of  the 
Newton-Raphson method.


5.0  Example.

     Solve the set of simultaneous equations

             (3 - 2x )x  - 2x     = -1   ,
     -x    + (3 - 2x )x  - 2x     = -1   ,    i = 1 ... 8 ,
     -x    + (3 - 2x )x           = -1   ,

starting with the initial guess x  = -1,  i = 0 ... 8.

/* zerovd.c
   Sample driver for the simultaneous eqn solver zerov().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define ndim 9
double x[ndim], fvec[ndim], xtol, ftol, L2norm;
double NAG[ndim];
int    i, n, flag, nfe, method;
#if (PROTOTYPE)
int    f (int n, double *x, double *fv);
int    jacob (int n, double *x, double *rj);
#else
int    f ();
int    jacob ();
#endif

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the equation solver zerov().\n\n");

NAG[0] = -0.5707;  NAG[1] = -0.6816;  NAG[2] = -0.7017;
NAG[3] = -0.7042;  NAG[4] = -0.7014;  NAG[5] = -0.6919;
NAG[6] = -0.6658;  NAG[7] = -0.5960;  NAG[8] = -0.4164;

n      = 9;
nfe    = 200;
xtol   = 1.0e-5;
ftol   = 1.0e-5;
method = -2;
for (i = 0; i < n; ++i) x[i] = -1.0;  /* initial guess */

printf ("First, use minimizer...\n");
zerov (f, jacob, n, x, fvec, xtol, ftol, method, &nfe, &flag);
printf ("%s\n", cmathmsg(ZEROV_C, flag));

if (flag == 0 || flag == 3 || flag == 4)
   {
   printf ("Solution ...\n");
   printf ("    x           NAG        residual\n");
   printf ("-----------------------------------\n");
   for (i = 0; i < n; ++i)
      printf ("%10.5f  %10.4f  %10.3e\n", x[i], NAG[i], fvec[i]);

   L2norm = 0.0;
   for (i = 0; i < n; ++i) L2norm += fvec[i] * fvec[i];
   printf ("\nL2 norm of residuals     = %10.3e\n", L2norm);
   printf ("Number of fn evaluations = %d\n\n", nfe);
   }

nfe    = 100;
xtol   = 1.0e-10;
ftol   = 1.0e-10;
method = 1;

printf ("Second, improve solution with Newton-Raphson...\n");
zerov (f, jacob, n, x, fvec, xtol, ftol, method, &nfe, &flag);
printf ("%s\n", cmathmsg(ZEROV_C, flag));

if (flag == 0)
   {
   printf ("Solution ...\n");
   printf ("    x           NAG        residual\n");
   printf ("-----------------------------------\n");
   for (i = 0; i < n; ++i)
      printf ("%10.5f  %10.4f  %10.3e\n", x[i], NAG[i], fvec[i]);

   L2norm = 0.0;
   for (i = 0; i < n; ++i) L2norm += fvec[i] * fvec[i];
   printf ("\nL2 norm of residuals     = %10.3e\n", L2norm);
   printf ("Number of fn evaluations = %d\n", nfe);
   }

return (0);
}  /* end of main */



/* Set up the tridiagonal system given as the example in
   the NAG manual for C05NBF  */

int f (n, x, fvec)
int    n;
double *x;
double *fvec;

{
int i;

fvec[0] = (3.0 - 2.0 * x[0]) * x[0] - 2.0 * x[1] + 1.0;
for (i = 1; i < n-1; ++i)
   fvec[i] = -x[i-1] + (3.0 - 2.0 * x[i]) * x[i] - 2.0 * x[i+1] + 1.0;
fvec[n-1] = -x[n-2] + (3.0 - 2.0 * x[n-1]) * x[n-1] + 1.0;

return (0);
}


int jacob (n, x, jac)
int    n;
double *x;
double *jac;

{
int i, j;

for (i = 0; i < n; ++i)
   for (j = 0; j < n; ++j)
      jac[i * n + j] = 0.0;

jac[0] = 3.0 - 4.0 * x[0];
jac[1] = -2.0;

for (i = 1; i < n-1; ++i)
   {
   jac[i * n + i-1] = -1.0;
   jac[i * n + i]   = 3.0 - 4.0 * x[i];
   jac[i * n + i+1] = -2.0;
   }

jac[(n-1) * n + n-2] = -1.0;
jac[(n-1) * n + n-1] = 3.0 - 4.0 * x[n-1];

return (0);
}


6.0  Program Results.

  --- CMATH --- Design Software 1989

Exercise the equation solver zerov().

First, use minimizer...
zerov() : normal return
Solution ...
    x           NAG        residual
-----------------------------------
  -0.57065     -0.5707    1.17e-05
  -0.68162     -0.6816    4.01e-05
  -0.70173     -0.7017    1.08e-05
  -0.70421     -0.7042    2.12e-05
  -0.70137     -0.7014    1.24e-05
  -0.69186     -0.6919    4.99e-06
  -0.66579     -0.6658   -3.60e-06
  -0.59603     -0.5960    2.71e-06
  -0.41641     -0.4164    1.04e-05

L2 norm of residuals     =   2.61e-09
Number of fn evaluations = 416

Second, improve solution with Newton-Raphson...
zerov() : normal return
Solution ...
    x           NAG        residual
-----------------------------------
  -0.57065     -0.5707    9.54e-18
  -0.68163     -0.6816    7.52e-17
  -0.70173     -0.7017    2.31e-16
  -0.70421     -0.7042   -2.17e-17
  -0.70137     -0.7014    1.64e-16
  -0.69187     -0.6919    2.86e-16
  -0.66579     -0.6658   -9.93e-17
  -0.59603     -0.5960   -1.36e-16
  -0.41641     -0.4164    7.33e-17

L2 norm of residuals     =   2.02e-31
Number of fn evaluations = 4

