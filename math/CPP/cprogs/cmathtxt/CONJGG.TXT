------------------------------------------------------------------
Design Software                                           conjgg()
------------------------------------------------------------------


1.0  Purpose.

     Find the minimum value of a user defined scalar function f(x) 
where x is  a  vector  of  independent  varaibles.   The  function 
derivatives need to be well behaved.


2.0  How to use the function.

     The function minimizer is  implemented  as  a  set  of  three 
routines:  conjgg() directs the multi- dimensional search, linem() 
performs a one-dimensional search along a specified direction  and 
braket() finds a set of points that  bracket  a  minimum  along  a 
specified direction.  An auxiliary routine partiald() may be  used 
to estimate the function derivatives if the user does not want  to 
supply them explicitly.  The  user needs  to  call conjgg()  only; 
linem(), braket() and partiald() are used internally. 

     The function conjgg() receives and  returns  all  information 
via its formal arguments.  It is declared as
     
     int conjgg (f, mf, dfdx, x, n, reqmin, fmin, flag, itmax, xmax,
                 iter, nfe, nje)
     double (*f)();
     int    mf, (*dfdx)();
     double x[];
     int    n;
     double reqmin, *fmin;
     int    *flag, itmax;
     double xmax;
     int    *iter, *nfe, *nje;


2.1  Parameter types.

     f         : pointer to a function returning a double value
                 double f (n, x)
                 int    n;
                 double x[];
                 {
                 return (double value);
                 }
     mf        : integer value
     dfdx      : pointer to a function returning an integer value
                 (The value returned is ignored.)
                 int dfdx (n, x, df)
                 int    n;
                 double x[], df[];
                 {
                 df[0] = ...;
                 ...
                 return (0);
                 }
     x         : pointer to a vector of double values 
                 with dimension > n
     n         : integer value
     reqmin    : double value
     fmin      : pointer to a double variable
     flag      : pointer to an integer variable
     itmax     : integer value
     xmax      : double value
     iter      : pointer to an integer variable
     nfe       : pointer to an integer variable
     nje       : pointer to an integer variable


2.2  Input.

     f         : The name of the user defined objective function
                 f(x).  The variables should be scaled so that 
                 both f and the elements of x are order(1).
     mf        : Method flag for derivative evaluations
                 mf = 0, the user function will be used
                 mf = 1, the derivatives will be approximated
                         with finite differences.  The user
                         function dfdx() still needs to be present
                         but need not do anything.
     dfdx      : The name of the user defined derivative
                 function where
                 df[i] = df/dx[i], i = 0 ... n-1.
     x         : The vector containing the starting guess.
     n         : The number of independent variables.
     reqmin    : The requested precision of the minimum.  The 
                 search is terminated when the difference between
                 two successive guesses of the minimum is smaller
                 than reqmin * (1.0 + minimum value).
     itmax     : Maximum number of linear searches allowed.
     xmax      : Bound on the search parameter for the one-d
                 searches.  If the objective function is scaled
                 so that x is order 1, then a value of 100.0 for
                 xmax appears to be ample.  This is one of the
                 failure detectors on the one-d search.  The
                 number of steps taken for each one-d search is
                 limited to 100.


2.3  Output.

     conjgg()  : return an unspecified integer value which should
                 be ignored.
     x         : The best guess for the coordinates of the minimum.
     fmin      : The objective at this minimum point.
     iter      : Number of one-d searches performed.
     nfe       : Number of function evaluations used.
     nje       : Number of derivative evaluations used.
     flag      : An error indicator.
                 flag = 0 : Normal return.
                 flag = 1 : Did not converge within itmax
                            searches.
                 flag = 2 : Could not bracket a minimum for a
                            one-d search.
                 flag = 3 : Could not allocate memory for
                            the internal workspace.
                 flag = 4 : Invalid user input. e.g. n < 1,
                            reqmin < 0.0, p == NULL, itmax < 1,
                            xmax < 0.0.


2.4  Workspace.

     Array workspace consisting of 4n double elements is allocated 
within conjgg().


3.0  Method.

     The function conjgg() minimizes f(x) using the  Polak-Ribiere 
conjugate  gradient  method.   A  sequence  of  one-   dimensional 
searches is performed using linem() until the value of the current 
minimum has converged.  The one-d search  is  performed  by  first 
bracketing a minimum along the current direction (braket()  )  and 
then refining the guess using  Brent's  method  (linem()  ).   The 
function derivatives may be supplied by the user or  they  may  be 
approximated by one-sided finite-differences.  They  are  required 
only for selecting a new direction for the next one-d search; they 
are not used by linem() or braket().


4.0  References.

W.H. Press, B.P. Flannery, S.A.  Teukolsky  &  W.T.  Vetterling  : 
"Numerical Recipes. The art of scientific  computing."   Cambridge 
University Press, Cambridge, 1986.


5.0  Example.

     Find the minimum of 

     f(x , x ) = exp(x ) (4x  + 2x  + 4x x  + 2x  + 1)
with starting values x  = -1.0, x  = 1.0.


/* conjggd.c
   Sample driver for the function minimizer conjgg().  */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{

double f(), reqmin, fmin, x[2], xmax;
int    dfdx(), n, flag, itmax, iter, nfe, nje, mf;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the function minimizer conjgg().\n");
n       = 2;
mf      = 0;
reqmin  = 1.0e-6;
itmax   = 100;
xmax    = 100.0;
x[0]    = -1.0;
x[1]    =  1.0;
conjgg (f, mf, dfdx, x, n, reqmin, &fmin, &flag,
        itmax, xmax, &iter, &nfe, &nje);
printf ("\n%s\n", cmathmsg(CONJGG_C, flag));

if (flag == 0 || flag == 1)
   {
   printf ("\nMimimum objective value of %e found at ..\n", fmin);
   printf ("x[0] = %f .. x[1] = %f\n", x[0], x[1]);
   printf ("Expected objective value of 0.0 at (0.5, -1.0).\n");
   printf ("\nStatistics ...\n");
   printf ("nfe = %d .. nje = %d\n", nfe, nje);
   }

return (0);
}  /* end of main */



double f (n, x)
int    n;
double x[];
/* This function is taken from the text
   "Practical Optimization"  by P.E. Gill et al.
   It is also the example used in the NAG manuals.
   */
{
double r;
r = 4.0 * x[0] * (x[0] + x[1]) + 2.0 * x[1] * (x[1] + 1.0) + 1.0;
r *= exp(x[0]);
return (r);
}


int dfdx (n, x, dx)
int    n;
double x[], dx[];
{
double r, t;
t = exp(x[0]);
r = 4.0 * x[0] * (x[0] + x[1]) + 2.0 * x[1] * (x[1] + 1.0) + 1.0;
r *= t;
dx[0] = r + t * (8.0 * x[0] + 4.0 * x[1]);
dx[1] = t * (4.0 * (x[0] + x[1]) + 2.0);
return (0);
}


6.0  Program Results


  --- CMATH --- Design Software 1989

Exercise the function minimizer conjgg().

conjgg() : normal return

Mimimum objective value of 3.38526e-11 found at ..
x[0] = 0.499998 .. x[1] = -1.00000
Expected objective value of 0.0 at (0.5, -1.0).

Statistics ...
nfe = 72 .. nje = 5



