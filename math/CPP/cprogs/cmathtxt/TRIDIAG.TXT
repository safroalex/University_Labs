------------------------------------------------------------------
Design Software                              tridiag(), trisolve()
------------------------------------------------------------------


1.0  Purpose.

     Solve the linear algebraic equations Ax = b,  where  A  is  a 
tridiagonal matrix.

        u                                             o
        1 d    ud    0    0               0      0    1
        1 ld   d    ud    0               0      0    1
    A = 1                                             1
        1 0              ld    d    ud    0      0    1
        1                                             1
        1 0                               ld     d    1
        m                                             .


2.0  How to use the functions.

     The  function  tridiag()  is  used  to  perform  the  forward 
elimination.  It is declared as 
     
     int tridiag (n, ld, d, ud, flag)
     int    n;
     double ld[], d[], ud[];
     int    *flag;

If tridiag() returns successfully, then trisolve() may be  invoked 
to solve  for  any  number  of  right-hand-side  vectors.   It  is 
declared as 

     int trisolve (n, ld, d, ud, x, flag)
     int    n;
     double ld[], d[], ud[], x[];
     int    *flag;


2.1  Parameter types.

     n         : integer value
     ld        : pointer to a vector of double values with
                 dimension ld[ndim], ndim > n
     d         : pointer to a vector of double values with
                 dimension d[ndim], ndim > n
     ud        : pointer to a vector of double values with
                 dimension ud[ndim], ndim > n
     flag      : pointer to an integer value
     x         : pointer to a vector of double values with
                 dimension x[ndim], ndim > n


2.2  Input to tridiag().

     n         : The order of matrix A. n < ndim.
     ld        : Lower off-diagonal.  (elements 1 ... n-1)
     d         : Diagonal.            (elements 0 ... n-1)
     ud        : Upper off-diagonal.  (elements 0 ... n-2)
     Note that the index for ld[], d[], ud[] corresponds to the
     row index of A.


2.3  Output from tridiag().

     tridiag() : returns an unspecified integer value. It should
                 be ignored.
     d, ud     : will contain the upper triangular matrix to be
                 used by trisolve().
     ld        : will contain a record of the multipliers used
                 in the forward elimination.  These are needed by
                 trisolve().
     flag      : Status indicator.
                 flag = 0 : normal return
                 flag = 1 : elimination failure; one of the
                            diagonal elements was zero.
                 flag = 2 : n < 3.


2.4  Input to trisolve().

     n         : The order of matrix A. n < ndim.
     ld,d,ud   : The modified diagonals as computed by tridiag().
     x         : The right-hand-side vector, b.


2.5  Output from trisolve().

     trisolve() : returns an unspecified integer value. It should
                  be ignored.
     x         : The solution vector x in Ax = b.
     flag      : Status indicator
                 flag = 0 : normal return
                 flag = 1 : back-substitution failure


3.0  Method.

     The function tridiag() uses Gaussian elimination  and  stores 
the multipliers in the lower diagonal.  trisolve() uses  uses  the 
stored multipliers to perform the same forward  elimination  on  b 
and then solves the system using back-substitution.


4.0  Reference.

L.V. Atkinson &  P.J.  Harley  :  "An  introduction  to  numerical 
methods with Pascal."  Addison-Wesley Publishing Company,  London, 
1983.


5.0  Example.

/* tridiagd.c
   Example program to exercise tridiagonal equation solver.
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define  ndim  20
double d[ndim], ld[ndim], ud[ndim], x[ndim];
int    n, i, flag;
double rhs;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample driver for tridiag() and trisolve()...\n");

n = 15;

for (i = 0; i < n; ++i)
   {
   ld[i] = 1.0;
   d[i]  = 3.0;
   ud[i] = 1.0;
   x[i]  = (double) (i+1);
   }
ld[0]   = 0.0;    /* ignored anyway */
ud[n-1] = 0.0;

tridiag (n, ld, d, ud, &flag);
printf ("\n%s\n", cmathmsg(TRIDIAG_C, flag));

if (flag == 0)
   {
   trisolve (n, ld, d, ud, x, &flag);
   printf ("\n%s\n", cmathmsg(TRISOLVE_C, flag));

   printf ("\nSolution ...\n");
   printf ("   j      x[i]       rhs[j]\n");
   printf ("-------------------------------\n");
   for (i = 0; i < n; ++i)
      {
      /* reconstruct right hand side */
      if (i == 0)        rhs = 3.0 * x[0] + 1.0 * x[1];
      else if (i == n-1) rhs = 1.0 * x[n-2] + 3.0 * x[n-1];
      else               rhs = 1.0 * x[i-1] + 3.0 * x[i] + 1.0 * x[i+1];
      printf ("%3d  %10.5f  %10.5f\n", i, x[i], rhs);
      }
   }
return (0);
} /* ... end of main */


6.0  Program Results.

  --- CMATH --- Design Software 1989

Sample driver for tridiag() and trisolve()...

tridiag() : normal return

trisolve() : normal return

Solution ...
   j      x[i]       rhs[j]
-------------------------------
  0     0.20000     1.00000
  1     0.40000     2.00000
  2     0.60001     3.00000
  3     0.79997     4.00000
  4     1.00008     5.00000
  5     1.19979     6.00000
  6     1.40055     7.00000
  7     1.59855     8.00000
  8     1.80380     9.00000
  9     1.99006    10.00000
 10     2.22602    11.00000
 11     2.33188    12.00000
 12     2.77833    13.00000
 13     2.33313    14.00000
 14     4.22229    15.00000

