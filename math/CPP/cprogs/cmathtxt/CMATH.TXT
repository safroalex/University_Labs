------------------------------------------------------------------
Design Software                                           Contents
------------------------------------------------------------------

Introduction.....................................................1

Legal Matters....................................................2
   Licence Agreement                                             2
   Acknowledgements                                              2
   Disclaimer                                                    2

Installation Notes...............................................3
   What is supplied                                              3
   Installation in a Turbo-C environment                         3
   Installation in a Microsoft-C environment                     3
   Installation in a UNIX environment                            4
   General Notes on Compiling the CMATH routines                 4
   User Notes                                                    6

Reference Section................................................7
   Table 1: CMATH files and routines                             8

Interpolation and Differentiation...............................10
   Interpolate, differentiate or integrate 
      using a cubic spline (spline)                             12
   Interpolate or differentiate using a B-spline (bspline)      17
   Interpolate, differentiate or integrate 
      using a Chebyshev polynomial (cheby)                      23
   Fit a cubic spline using least squares (fitspl)              29
   Fit a polynomial using least squares (fitpoly)               34

Matrices and Linear Equations...................................39
   Decompose a general matrix (decomp, solve)                   40
   Invert a general matrix (invert)                             44
   Decompose a banded matrix (bandfac, bandslv)                 47
   Solve a tridiagonal system of equations (tridiag, trisolve)  52
   Compute the Eigenvalues of a general real matrix (qr)        56
   Eigenvalues and Eigenvectors of a general matrix (qrv)       59

Nonlinear Equations.............................................64
   Solve a single nonlinear equation (zeroin)                   65
   Solve a set of nonlinear equations (zerov)                   68
   Find the roots of a polynomial (polyroot)                    74

Minimization....................................................77
   Minimize a function using function values only (nelmin)      78
   Minimize a well behaved function (conjgg)                    82

Quadrature......................................................87
   Fixed rule Gaussian quadrature (qk21)                        88
   Adaptive Gaussian quadrature (qags)                          91
   Adaptive Newton-Cotes quadrature (quanc8)                    95
   Integration over an infinite domain (qinf)                   98

Integration of Ordinary Differential Equations.................102
   Integrate a set of nonstiff ODE's (rkf45)                   103
   Integrate a set of stiff ODE's (stint1)                     108

Complex Arithmetic.............................................113
   Integrated package for COMPLEX arithmetic (COMPLEX)         114
   Complex division (cdivsn)                                   120
   Complex multiplication (cmultn)                             121
   Square-root of a complex number (csqroot)                   122
   Absolute value of a complex number (cabslt)                 123

Fourier Transforms.............................................124
   Fast Fourier transform of a complex array (fft)             125
   Discrete Fourier transform of a general length array (dft)  129

Sorting........................................................134
   Sort an array of numbers into ascending order (indexx)      135

House Keeping..................................................138
   Translate CMATH error codes to English text (cmathmsg)      139

Index by Function Name.........................................140

------------------------------------------------------------------
Design Software                                       Introduction
------------------------------------------------------------------

     The CMATH library is a collection  of  mathematical  routines 
written in the C programming language.  They include  routines  to 
perform  the  basic  numerical  operations  of  equation  solving, 
function minimization and function integration.  There is also  an 
integrated  set  of  routines  for  the  manipulation  of  complex 
numbers.  For each class of numerical operation, the  routines  in 
CMATH have been  chosen  with  the  emphasis  on  versatility  and 
robustness.  They have similar capabilities to some of the FORTRAN 
routines available in the NAG and IMSL libraries.

     Because the CMATH routines are written in C,  you  no  longer 
need to link your C  programs  to  FORTRAN  or  assembly  language 
modules.  And, because they are supplied as source code,  you  can 
use them wherever you have access to a C compiler.  

     If you wish to install CMATH onto  your  machine,  check  the 
notes in the installation section and then  copy  the  files  onto 
your machine.  They are ASCII files and are not copy protected.

     This manual is a reference manual only.  It tells you how  to 
interface your program to the CMATH routines but does not describe 
the fine details of  the  algorithms  used.   If  you  would  like 
general advice on numerical methods or information on the specific 
algorithms used in CMATH then the following references are a  good 
starting point.

     W.H. Press, B.P. Flannery, S.A. Teukolsky & W.T. Vetterling : 
     "Numerical  Recipes.  The  art  of   scientific   computing." 
     Cambridge University Press, Cambridge, 1986.

     G.E. Forsythe, M.A. Malcolm & C.B. Moler : "Computer  Methods 
     for  Mathematical  Computations."  Prentice-Hall,   Englewood 
     Cliffs, 1977.

     L.V. Atkinson & P.J. Harley : "An Introduction  to  Numerical 
     Methods with Pascal."  Addison-Wesley, London, 1983.

     We also  assume  that  you  are  a  reasonably  proficient  C 
programmer.  If you would like advice on C  programming  then  the 
following books are useful.

     B.W. Kernighan & D.M. Ritchie : "The C Programming Language."  
     Prentice-Hall, 1978.

     H. Schildt : "C: The Complete  Reference."   Osborne  McGraw- 
     Hill, Berkeley, 1987.

     The best way to find a CMATH routine  to  suit  a  particular 
problem is to check the contents list on the  previous  page.   If 
you already know the name of the routine, you may  find  its  page 
number quickly by searching the index at the back of the manual.

------------------------------------------------------------------
Design Software                                      Legal Matters
------------------------------------------------------------------

Licence Agreement.

     The CMATH library is  supplied  as  machine  readable  source 
code.  The material is not "copy protected" but it  is  copyright.  
We license the purchaser  to  use  a  single  copy  of  the  CMATH 
routines on  whatever  machine  he  or  she  may  choose  but  the 
purchaser is not to distribute CMATH source or object  files.   If 
CMATH routines are to  be  used  for  classwork,  then  individual 
routines may be distributed to students for the  duration  of  the 
course.  


Acknowledgements.

     Some of the routines in the CMATH library  are  derived  from 
FORTRAN routines available  in  the  open  literature.   In  these 
cases, the source  of  the  FORTRAN  routine  is  referenced.   In 
essence, we are providing the availability of these algorithms  in 
C.

Turbo-C is a trademark of Borland International.
MS-DOS is a trademark of Microsoft Corporation.
UNIX is a trademark of AT&T Bell Laboratories.
IBM is a trademark of International Business Machines Corporation.
NAG is a trademark of Numerical Algorithms Group Inc.
IMSL is a trademark of IMSL Inc.


Disclaimer.

     We have tried to produce a reliable and accurate  library  of 
mathematical routines, but we do  not  guarantee  that  the  CMATH 
routines are "bug free".  As  with  any  numerical  software,  the 
routines should be used with care and the results interpreted with 
caution.  Don't trust a computed result blindly!

     If you do experience difficulty  using  the  library,  please 
contact us.

                         Peter and Nigel,                         
                         Design Software,                         
                         42 Gubberley St,                         
                          Kenmore, 4069,                          
                            Australia.                            

We would appreciate a description of  the  problem  and  a  simple 
example program that illustrates the problem.

-----------------------------------------------------------------
Design Software                                Installation Notes
-----------------------------------------------------------------

What is supplied.

1.  The library is supplied as a set of ASCII files containing the 
source code.  You may copy the files into your work area and  link 
to routines directly  or  you  may  build  a  library  file.   The 
principle files (".c" extension) are listed  in  table  1  in  the 
reference section.  For each routine, there  is  a  sample  driver 
program in a file with the same name but suffixed with a "d".  For 
example, the routine zeroin() may be found in  the  file  zeroin.c 
while its sample driver may be found in zeroind.c.

2.  "Project" files (for use with  the  Turbo-C  environment)  are 
supplied for all sample driver programs (e.g. zeroind.prj).  These 
files specify all of the CMATH source files needed to  produce  an 
executable program.  If you have very little available work  space 
on your disc, then copy only those files  listed  in  the  project 
file.

3.  A set of "makefiles"  for  building  and  running  the  sample 
programs in the Turbo-C (version 2), Microsoft-C (version 5.1) and 
UNIX environments are  supplied  as  "turboc.mak",  "msc.mak"  and 
"unix.mak" respectively.


Installation in a Turbo-C (MS-DOS) environment.

1.  Transfer all files to your work area.

2.  Build and run the sample programs and record their output in
    the file "LOGFILE" using the command
    C> make -fturboc.mak > LOGFILE 
    where C> is the MS-DOS prompt.

3.  If all is well, "LOGFILE" should contain similar results to
    the Program Results in the reference section.



Installation in a Microsoft-C (MS-DOS) environment.

1.  Transfer all files to your work area.

2.  Build and run the sample programs and record their output in
    the file "LOGFILE" using the command
    C> make msc.mak > LOGFILE 
    where C> is the MS-DOS prompt.

3.  If all is well, "LOGFILE" should contain similar results to
    the Program Results in the reference section.


Installation in a UNIX environment.

1.  Transfer all files to your work area.

2.  Edit "cmath.h".
    2a.  Remove the Control-Z file terminator if present.
    2b.  Select the appropriate compiler by setting its defined
         constant to 1 and all others to 0.
    2c.  Set EPSILON, UNDRFLOW and OVRFLOW if you wish.

3.  Edit "stripz.c" and remove the Control-Z file terminator if
    present.

4.  Compile and link stripz using the command
    % cc stripz.c -o stripz.x
    where % is the UNIX prompt.

5.  Edit "unix.mak" and remove the Control-Z file terminator if
    present.

6.  Build and run the sample programs as a background job and
    record their output in the file "LOGFILE".
    % make -f unix.mak > LOGFILE &

7.  If all is well, "LOGFILE" should contain similar results to
    the Program Results in the reference section.


General Notes on Compiling the CMATH routines.

1.  The header file "cmath.h" contains function prototypes for all 
of the routines in the CMATH library.  It should  be  included  in 
any program that uses  CMATH  routines.   It  also  contains  some 
machine dependent constants.

1a.  A list of compilers  is  provided  in  "cmath.h".   Pick  the 
constant definition that most closely describes your compiler  and 
set it to 1.  Set the others to  0.   As  supplied,  the  constant 
ANSII is set to 1.  If your compiler is not listed, just  set  the 
defined constants PROTOTYPE and STDLIBH to  indicate  whether  you 
wish to use full function prototypes and search for the "stdlib.h" 
header file respectively.

1b.  The constants EPSILON, UNDRFLOW, OVRFLOW define the effective 
machine precision, the smallest positive number  and  the  largest 
positive number that can be represented  on  your  machine.   They 
have been set to values that  should  allow  CMATH  work  on  most 
machines, however you may wish to optimize them.

2.  The CMATH routines assume that all arrays passed to  them  are 
single-dimension  arrays.    The   routines   decomp(),   solve(), 
bandfac(), bandslv(), qr(), qrv() and invert() take  a  matrix  as 
one (or more) of their inputs.  You may wish to declare the matrix 
as A[ndim][ndim] and pass to the CMATH routine  a  pointer  to  A.  
This  is  usually  all  right,  despite  compiler  warnings  of  a 
suspicious pointer conversion.  However, for some  compilers  such 
as the  IBM/370  C-compiler,  A  must  be  declared  as  a  single 
dimension array A[ndim * ndim].  The sample programs supplied here 
use single dimension arrays for portability.

3.  All floating point quantities are handled as "double" (64-bit) 
rather than  "float"  (32-bit)  quantities.   Although  this  will 
increase storage, the numerical round-off errors  should  be  less 
troublesome.

4.  Do not write any user functions for CMATH  routines  that,  in 
turn, call the  same  CMATH  routines.   If  you  do,  the  static 
variables used  in  some  of  the  routines  may  be  overwritten.  
However, it is acceptable to write  a  user  function  that  calls 
other CMATH routines.  The function  fitspl()  is  an  example  of 
this.

5.  CMATH is supplied on MS-DOS format discs.  If you are going to 
use it on a minicomputer or workstation you  may  find  that  some 
UNIX C compilers do not like the Control-Z terminator that is used 
for MS-DOS files.  These terminators may be manually deleted  with 
a suitable text editor.  Alternatively, the  program  "stripz"  is 
supplied to do the same job (but  you  will  still  have  to  edit 
"cmath.h" and "stripz.c" manually).   For  specific  instructions, 
see the section "Installation in a UNIX environment".


-----------------------------------------------------------------
Design Software                                 Reference Section
-----------------------------------------------------------------

     This section  documents  the  user  interface  to  the  CMATH 
routines.  It  tells  you  how  to  call  each  routine  and  what 
arguments to pass to it.

     If you already know the routine name, look up  the  index  on 
the last page to find its page number.  If  you  want  to  find  a 
suitable routine for  a  particular  problem,  look  up  the  main 
contents page.

     Table 1 shows  where  to  find  the  CMATH  routines  on  the 
distribution disc.  Note that nearly all of the routines need  the 
header file "cmath.h" to compile correctly  and  that  some  CMATH 
routines use other CMATH routines.   A  number  of  the  functions 
mentioned in table 1 are not documented in this reference section.  
They are service routines  and  are  not  intended  to  be  called 
directly by the your program. 

     The documentation for each routine (except  for  the  COMPLEX 
number routines) has the following format.

    1.  The purpose of the routine or function.  This is usually a 
    single mathematical operation: e.g. the integration of a  user 
    supplied function.

    2.   How  to  use  the  routine.   This  section  includes   a 
    description  of  the  function  parameters.   The  "old-style" 
    function declarations are used in this manual but,  for  ANSII 
    standard compilers, full function  prototypes  are  available.  
    We recommend their use.

    3.  A brief description of  the  method  employed  within  the 
    routine.

    4.  A reference to the literature on the algorithm used.

    5.  A sample  program  that  uses  the  routine.   The  sample 
    "driver" usually performs a small test and then prints out the 
    computed result together  with  the  expected  result.   These 
    programs are supplied so that the  user  may  test  the  CMATH 
    functions when installing the library on a new machine.   They 
    also provide a basic "shell" when applying the  CMATH  routine 
    to a new problem.

    6.  Program Results.  A record of the output produced  by  the 
    sample program in the Turbo-C environment.  Note that this may 
    vary slightly for other compilers.


                      Table 1: CMATH Files and Routines                     



File         CMATH functions          Purpose            Other CMATH
                                                         functions required
----------------------------------------------------------------------------

bandfac.c    bandfac(),              solve a banded        none
             bandslv()               matrix equation

bspline.c    bspline(), bseval(),    interpolate and       bandfac(),
             interv(), bsplvb(),     differentiate         bandslv()
             bsdcpnts(), bsplinit(), using a B-spline
             bisect(), bsplend(),
             bsplmake(), bspldest()

cheby.c      cheby(), chebyc()       Chebyshev polynomial  none
             chebyd(), chebyi()      interpolation

cmplx.c      cabslt(), cmultn()      complex arithmetic    none
             cdivsn(), csqroot()     (stand-alone)

complex.c    see complex.h           complex arithmetic    none
                                     (integrated package)

conjgg.c     conjgg(), linem()       minimize a contin-    none
             braket(),partiald()     uous function of
                                     several variables

cmathmsg.c   cmathmsg()              translate CMATH       none
                                     error codes to
                                     English text

decomp.c     decomp(), solve()       solve a system of     none
                                     linear equations

dft.c        dft(), chirp()          Discrete Fourier      fft()
             chirpmult()             transform of a 
                                     general length
                                     array

fft.c        fft()                   Fast Fourier          none
                                     transform of a 
                                     complex array

fitpoly.c    fitpoly()               fit a polynomial      cheby()
                                     (least squares)       decomp()
                                                           solve()

fitspl.c     fitspl(), L2spl(),      fit a cubic spline    conjgg()
             L2deriv()               (least squares)

indexx.c     indexx()                sort an array of      none
                                     numbers

invert.c     invert()                invert a matrix       decomp()
                                                           solve()

                              Table 1 continued                             



File         CMATH functions          Purpose            Other CMATH
                                                         functions required
----------------------------------------------------------------------------

nelmin.c     nelmin()                minimize a function   none
                                     of several variables

poly.c       polyroot(),             find the roots        cabslt()
             polymake(), polydiv()   of a complex          cdivsn()
             laguerre(),             polynomial            cmultn()
             polyeval()                                    csqroot()

qags.c       qags(), qqsort(),       adaptive Gaussian     qk21()
             qextn()                 quadrature            qk21init()

qinf.c       qinf(), ftrnsfm()       Gaussian              qags()
                                     quadrature on an      qk21()
                                     infinite domain       qk21init()

qk21.c       qk21(), qk21init()      fixed-rule Gauss      none
                                     quadrature

qr.c         qr(), balanc(),hqr(),   compute eigenvalues   cdivsn()
             elmhes(), eltran(),     and eigenvectors      cabslt()
             balbak(), qrvector(),   of a general matrix
             qrv(), hqr2()

quanc8.c     quanc8()                adaptive Newton-      none
                                     Cotes quadrature

rkf45.c      rkf45(), rkfinit(),     integrate non-stiff   none
             fehl45(), rkfend()      ODE's

spline.c     spline(), seval(),      interpolate using     none
             deriv(), sinteg()       a cubic spline

stint.c      stint0(), stint1(),     integrate stiff       decomp()
             stint2(), stint3()      ODE's                 solve()

tridiag.c    tridiag(), trisolve()   solve a tridiagonal   none
                                     matrix equation

zeroin.c     zeroin()                solve a nonlinear     none
                                     equation

zerov.c      zerov(), residsq(),     solve a system of     nelmin()
             jacobn(), dresid()      nonlinear equations   decomp()
                                                           solve()
                                                           conjgg()


------------------------------------------------------------------
Design Software                      Matrices and Linear Equations
------------------------------------------------------------------


     We provide three routines for  the  solution  of  the  linear 
algebraic system Axt=tb where A is a matrix of order n and x and b 
are real vectors.  


Direct Solution:
     For a general matrix, where all of the elements  are  stored, 
decomp() can be used to factorize A.  Once A has been  decomposed, 
solve() may be used to compute the solution x for  any  number  of 
right-hand-side vectors b.   The  routine  decomp()  is  based  on 
Gaussian elimination with partial pivoting.  It also  supplies  an 
estimate of the  condition  number  of  the  matrix  A.   A  large 
condition number indicates that the solution x will  be  sensitive 
to changes in the elements of A and/or b.


Banded Matrices:
     If the order of the matrix is large and its nonzero  elements 
are located in a narrow band either side of the diagonal  then  it 
may be more efficient to store only this band of nonzero  elements 
and use the routines bandfac()  and  bandslv()  to  factorize  and 
solve the system.   Note  that  bandfac()  does  not  use  partial 
pivoting.


Tridiagonal Matrices:
     In some cases, only one element either side of  the  diagonal 
is nonzero.  This may arise in the finite-difference  solution  of 
partial differential equations and  it  is  usually  efficient  to 
treat this system as a special case.  The routines  tridiag()  and 
trisolve() are provided for  the  factorization  and  solution  of 
these tridiagonal systems.


Matrix Inversion:
     Occasionally, you may want the  inverse  of  a  matrix.   The 
routine invert() is provided to do this.  It  first  factorizes  A 
and then constructs the inverse one column at a  time  by  solving 
Aa t=ti  where a  is the jth column of the inverse and i   is  the 
jth column of the identity matrix.


Eigenvalue Problem:
     The eigenvalue problem is defined as Axt=tlx where l  is  the 
eigenvalue and x is the corresponding  eigenvector.   The  routine 
qr() will compute all of the eigenvalues for a general real matrix 
while the routine qrv() will compute all of  the  eigenvalues  and 
corresponding eigenvectors of A.  The eigenvectors are returned by 
qrv()  packed  in  a  single  array  and  we  supply  the  routine 
qrvector() to extract the individual eigenvectors.   Although  the 
elements of A must be real, the eigenvalues and  the  elements  of 
the eigenvectors may be complex.

------------------------------------------------------------------
Design Software                                Nonlinear Equations
------------------------------------------------------------------


Single Equation:
     The routine zeroin() may be used to solve a single  nonlinear 
(or transcendental) equation of the form f(x)t=t0.  The function f 
is a user supplied function coded in C and x  is  the  independent 
variable.  Given two points  (a,  b)  which  bracket  a  solution, 
zeroin() will iteratively improve an estimate of the solution.  If 
a and b do not  bracket  a  solution,  zeroin()  will  attempt  to 
bracket a solution itself.  If a solution can be  bracketed,  then 
convergence to a user specified tolerance is almost certain.


Simultaneous Equations:
     Solving the set of nonlinear equations f(x)t=t0 is not always 
straight  forward.   Here  we  have  n  scalar  functions   of   n 
independent variables.  Given an initial guess for  the  solution, 
zerov() will attempt  to  improve  the  guess  either  by  Newton- 
Raphson iteration or by minimizing the sum of the  square  of  the 
function residuals.  There are no  guarantees  with  this  routine 
but,  if  the  problem  is  not  difficult,  the  Newton-  Raphson 
iteration will converge rapidly.


Polynomial Equations:
     If f(x) is a polynomial, then a number of specialized methods 
are available to find some or all  of  the  roots  of  f(x).   The 
routine polyroot() uses Laguerre's method to find the roots of  an 
nth order polynomial 
     f(x) = S  c x
where the polynomial coefficients, c  may be complex.   The  roots 
may be complex and are found iteratively, one at a time.   Once  a 
root is found, it is removed  from  the  polynomial  by  synthetic 
division.

------------------------------------------------------------------
Design Software                  Interpolation and Differentiation
------------------------------------------------------------------


     To interpolate a set of data points,  we  have  included  two 
sets of routines based on splines (or  piecewise  polynomials)  as 
these  are  usually  better  behaved  than   high   order   global 
polynomials.


Cubic Splines:
     The routine spline() will fit a cubic spline to a  set  of  n 
data points (x , y ), j = 0 ... n-1.  The spline is defined as the 
set of cubic polynomial segments
     S (x) = y  + b (x-x ) + c (x-x )  + d (x-x ) , 
     x  < x < x   ,  j = 0 ... n-2.
The spline has continuous first and second derivatives.  Once  the 
coefficient vectors have been computed using spline(), the  spline 
function  S(x)  may  be  evaluated  at  any  point  in  the  range 
x t<xt<tx    using seval().  Also, the  derivative  dS/dx  may  be 
evaluated using deriv()  and  the  integral  i tS(x')tdx'  may  be 
evaluated using sinteg().


B-splines:
     The routine bspline() will fit an order k B-spline to  a  set 
of n data points (x ,ty ), jt=t0 ... n-1.  The spline  is  defined 
as the set of polynomial segments
     P(u) =   S   P  B   (u)    ,
where P t=t(X ,tY ) are the B-spline "control points" and  B   (u) 
are the B-spline basis functions of order k for  the  knot  vector 
(u , u , ... u     ), u t<tu   .  The spline has continuous  first 
and second derivatives.  Once the coefficient  vectors  have  been 
computed  using  bspline(),  the  spline  function  P(u)  may   be 
evaluated  at  any  point  in  the  range  u t<tut<tu        using 
bseval().  The  derivatives  d P/du   and  hence  d y/dx   may  be 
evaluated using bsdcpnts() to define the derivative  B-spline  and 
then bseval() to evaluate it at any point.


Chebyshev Polynomials:
     Where you need to specify the precision of the  interpolating 
function, we provide some routines based on Chebyshev polynomials.  
These routines are useful when you wish to evaluate a function (or 
its derivative or integral) many times but each evaluation of  the 
original  function  is  expensive.  The  routine  cheby()  fits  a 
Chebyshev polynomial series to a user supplied function f(x)  over 
the interval [a,tb].  f(x) is a user supplied function coded in C.  
The polynomial is defined as
     S(x) =  S c T (z) + - c     ,
where zt=t((x-a)-(b-x))/(b-a), c , jt=t0...n-1 are the  polynomial 
coefficients  and  T t=tcos(jtarccos(z)),  jt=t0...n-1   are   the 
Chebyshev polynomials.  The independent variable x must lie in the 
range at<txt<tb.  The routine cheby() can be used to evaluate  the 
polynomial series while the derivative of f  may  be  obtained  by 
first differentiating the coefficients using the routine  chebyd() 
and then evaluating the differentiated series with  cheby().   The 
integral itS(x')tdx' may be obtained similarly using chebyi()  and 
cheby().


Least Squares Splines:
     If your data points contain  some noise, you may wish to  fit 
a spline or polynomial that minimizes the sum of  the  squares  of 
the residuals (S(x )t-ty ) (i.e. a merit function).   The  routine 
fitspl() will fit a cubic spline to the  set  of  data  points  by 
using conjgg() to  directly  minimize  the  merit  function.  Once 
fitspl() computes the spline coefficients, the  routines  seval(), 
deriv() and sinteg() may be  used  to  evaluate  the  spline,  its 
derivative or its integral respectively.


Least Squares Polynomials:
     The routine fitpoly() fits (in the  least  squares  sense)  a 
Chebyshev polynomial series to the  data  by  solving  the  normal 
equations.  Once the polynomial  coefficients  are  computed,  the 
routine  cheby()  may  be  used  to   evaluate   the   polynomial.  
Integration and differentiation may be  performed  using  chebyi() 
and chebyd() as described above.

------------------------------------------------------------------
Design Software                                         Quadrature
------------------------------------------------------------------


     We supply  one  fixed  and  two  adaptive  routines  for  the 
integration of a user supplied function over  a  finite  interval.  
The problem to be solved is It=titf(x)tdx where x is the  variable 
of integration and a and b are the finite integration limits.  The 
function f is a user supplied function coded in C.


Newton-Cotes Quadrature:
     The routine quanc8() is an adaptive integrator  that  divides 
the interval into a number of steps  and  applies  an  eight-panel 
Newton-Cotes rule to compute an estimate for I.  The estimate  for 
I should satisfy a user specified error  tolerance.   However,  if 
f(x) is badly behaved at the end  points  (a,  b)  or  within  the 
interval, quanc8() may not be  able  achieve  the  user  specified 
tolerance.


Gaussian Quadrature:
     If the singular behaviour of f(x) can be limited to the  ends 
of the interval, the routine qags() may  be  able  to  provide  an 
estimate for I.  qags() is an  adaptive  routine  that  applies  a 
Gaussian rule  (qk21())  to  the  individual  steps  and  uses  an 
extrapolation technique to approach the limit of zero step size.

     The routine qk21() applies a Gaussian quadrature rule of  the 
form I = S w x  to a single region.  Although qk21()  is  part  of 
the adaptive integrator qags(), it may be used directly.


Quadrature on an Infinite Domain:
     The routine qinf() may be used to compute integrals in  which 
one or  both  of  the  limits  are  infinite.   This  is  done  by 
transforming the independent variable so that the new  limits  are 
finite and then  calling  qags()  to  perform  this  finite  range 
integration.

------------------------------------------------------------------
Design Software     Integration of Ordinary Differential Equations
------------------------------------------------------------------


     We provide two routines  for  the  solution  of  first  order 
ordinary differential equations (ODE's) of the form
     -- = f(x, y)   , 
where x is the independent variable and y is the vector of  dependent 
variables.  The initial conditions y(xt=tx ) are to be supplied by 
the user.  

     A set of second order (or higher) ODE's  may  be  transformed 
into an equivalent set of first order ODE's  by  introducing  some 
auxiliary variables.  For example the second order equation 
     --- + a -- + b z = 0
may be transformed to the set of first order equations
     --- = -b y  - a y      ,
     --- = y                ,
where y  = z and y  = dz/dx.


Runge-Kutta Integrator:
     The routine rkf45() uses a Runge-Kutta-Fehlberg  4,5th  order 
method together with a step size selection algorithm to  integrate 
the set of ODE's from x   to  x   while  keeping  the  single-step 
truncation error within a user specified  tolerance.   rkf45()  is 
suitable for nonstiff or mildly stiff sets of ODE's where the time 
scales of the solution components are similar.


Stiff ODE integrator:
     The routine stint1() uses an implicit multi-step method.  The 
routine is suitable for the integration of stiff ODE's where there 
are rapidly decaying transients in the solution.  The  user  needs 
to supply an initial step size which stint1() may change  to  meet 
the specified error tolerance.  stint1() also needs a knowledge of 
the partial derivatives of f(x, y).  These may be supplied by  the 
user or they may be approximated using finite differences.



------------------------------------------------------------------
Design Software                                       Minimization
------------------------------------------------------------------


     We provide two routines for the unconstrained optimization of 
a user supplied (objective) function f(x) where x is a vector of n 
independent variables.  f(x) may be nonlinear.


Minimization without Derivatives:
     The routine nelmin() is a  versatile  routine  that  requires 
knowledge of the function  but  not  its  derivatives.   Given  an 
initial guess for the minimum, nelmin() sets up a "simplex" of n+1 
points that form the vertices of an n-dimensional polyhedron.  The 
vertices are moved so that  the  simplex  moves  away  from  large 
values of  f(x).   Although  the  routine  formally  minimizes  an 
unconstrained function, constraints may  be  included  as  penalty 
functions.  Although nelmin()  is  robust,  it  is  expensive  and 
should only be used for small n (say n < 5).


Minimization with Well-Behaved Derivatives:
     The routine conjgg() uses the conjugate  gradient  method  to 
find a minimum of f(x).   It  is  generally  more  efficient  than 
nelmin() but needs a well behaved function as it uses the function 
derivatives  to  select  its  search  directions.   The   function 
derivatives  may  be  supplied  by  the  user  or  they   may   be 
approximated by conjgg() using finite differences.



------------------------------------------------------------------
Design Software                                 Fourier Transforms
------------------------------------------------------------------


     We supply two routines for the computation  of  the  discrete 
Fourier   transform   of   a   complex   array   z t=tzr t+titzi , 
kt=t0...N-1, i t=t-1.  The forward transform is defined as
     Z(n) = ------   S   z  . e             ,
while the inverse transform is defined as
     z(k) = ------   S   Z  . e              .


Power-of-2 transform:
     The routine fft() uses the Cooley-Tukey algorithm to  compute 
the fast Fourier transform of a complex array where the length  of 
the array is a power of two.  The routine will  compute  both  the 
forward and reverse transform.


General Length Transform:
     The routine dft() computes the discrete Fourier transform  of 
a general length array.  It uses fft() to efficiently perform  the 
convolutions in Fourier space.  The routine will compute both  the 
forward and reverse transform.

------------------------------------------------------------------
Design Software                                 Complex Arithmetic
------------------------------------------------------------------


     We provide two sets  of  routines  for  the  manipulation  of 
complex numbers.  The routines cdivsn(),  cmultn(),  sqroot()  and 
cabslt() are intended to be used a stand-alone routines where  the 
user requires only a few complex operations.  They  are  coded  to 
avoid overflow of intermediate results and loss of precision.  The 
complex numbers are passed to and returned from  the  routines  as 
pairs of real numbers.

     The file "complex.c" provides an integrated  set  of  complex 
number routines that operate in a stack-like environment  and  are 
intended for use in situations where a lot of  complex  arithmetic 
is performed.  Users familiar with Hewlett-Packard calculators  or 
Forth should feel comfortable with these routines.


------------------------------------------------------------------
Design Software                                            Sorting
------------------------------------------------------------------


     Sorting an array of numbers into  ascending  order  is  often 
useful in numerical work but the standard  library  supplied  with 
most C-compilers has only an integer sorting routine.  The routine 
indexx() will index an array of floating point  numbers  (of  type 
double) without changing their locations in the  array.   This  is 
useful if the indexed array is to be used as a key to access other 
arrays. (e.g. We can  sort  eigenvalues  and  their  corresponding 
eigenvectors.)

------------------------------------------------------------------
Design Software                                      House Keeping
------------------------------------------------------------------


     We supply the routine cmathmsg()  to  translate  CMATH  error 
codes to short strings  of  English  text.   Most  CMATH  routines 
return an integer error flag.  This  flag  indicates  whether  the 
routine was successful or if it was not, why not.  We believe that 
the error message returned by cmathmsg() is easier to read and may 
save some of the time that would otherwise be spent looking up the 
error codes listed in this manual.


