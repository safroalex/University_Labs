------------------------------------------------------------------
Design Software                                  svd(), svdsolve()
------------------------------------------------------------------


1.0  Purpose.

     Solve the linear algebraic equation Ax = b by decomposing the 
m by n matrix A as At=tu w v .  Here both u  and  v  are  m  by  n 
matrices, w is an n element diagonal  matrix  and  T  denotes  the 
transpose.  The elements of A are 
          u                              o
          m                              .
where mt>tn.


2.0  How to use the functions.

     The function svd() receives and returns all  information  via 
its formal arguments.  It is declared as 
     
     int svd (ndim, m, n, A, w, getu, u, getv, v, flag)
     int    ndim, m, n;
     double *A, w[];
     int    getu; double *u;
     int    getv; double *v;
     int    *flag;

If svd() successfully decomposes A, then svdsolve() may be invoked 
to  solve  the  system  for  any  number  of   right-hand   sides.  
svdsolve() is declared as 

     int svdsolve (ndim, m, n, u, w, v, b, x, tol, flag)
     int    ndim, m, n;
     double *u, w[], *v, b[], x[], tol;
     int    *flag;


2.1  Parameter types.

     ndim      : integer value
     m         : integer value
     n         : integer value
     A         : pointer to an array of double values with
                 dimension A[ndim*m], ndim > n.
                 For some compilers, you may declare A as a two
                 dimensional array and address it as A[i][j]. 
                 Alternatively, A may be declared as a pointer to
                 a single dimensional array and be addressed as 
                 A[i*ndim + j].
     u         : pointer to an array of double values with
                 dimension u[ndim*m], ndim > n.
     getu      : integer value
     w         : pointer to an array of double values with
                 dimension w[n].
     v         : pointer to an array of double values with
                 dimension v[ndim*m], ndim > n.
     getv      : integer value
     flag      : pointer to an integer variable
     b         : pointer to a vector of double values with
                 dimension b[n].
     x         : pointer to an array of double values with
                 dimension x[n]
     tol       : double value


2.2  Input to svd().

     ndim      : The dimension of the rows of A, u and v as 
                 defined in the calling program.  svd() needs this 
                 value to access the matrix elements correctly.
                 Note: ndim > n and ndim > m.
     m         : The number of rows in the matrix A.
     n         : The number of columns in matrix A. n < ndim.
     A         : The matrix to be decomposed.
     getu      : getu = 1 : compute matrix u of the decomposition.
                 getu = 0 : do not obtain u.
     getv      : getv = 1 : compute matrix v of the decomposition.
                 getv = 0 : do not obtain v.


2.3  Output from svd().

     svd()     : returns an unspecified integer value which should
                 be ignored.
     A         : The original matrix is unaltered unless 
                 overwritten by u or v.
     w         : The n (non-negative) singular values.  The w[j],
                 j = 0 ... n-1 are the elements of a diagonal
                 matrix.
     u         : The orthogonal matrix u is returned if getu==1.
                 u[i*ndim+j], i = 0 ... m-1, j = 0 ... n-1.
     v         : The orthogonal matrix v is returned if getv==1.
                 v[i*ndim+j], i = 0 ... m-1, j = 0 ... n-1.
     flag      : Status indicator.
                 flag =  0 : normal return
                 flag = -1 : could not allocate memory for
                             workspace
                 flag = -2 : illegal user input (e.g. n < 1,
                             n > ndim, A == NULL, pivot == NULL)
                 flag = k > 0 : The (k-1)th singular value has not
                    been determined after 30 iterations. The 
                    singular values w[j], j = k, k+1, ... n-1
                    should be correct.


2.4  Workspace for svd().

     A vector of n double elements is allocated internally.


2.5  Input to svdsolve().

     ndim      : The dimension of the rows of A, u and v as 
                 defined in the calling program.  svdsolve() needs 
                 this value to access the matrix elements correctly.
     m         : The number of rows in the matrix A.
     n         : The number of columns in matrix A. n < ndim.
     w         : The n (non-negative) singular values as returned
                 by svd().
     u         : The orthogonal matrix u as returned by svd().
     v         : The orthogonal matrix v as returned by svd().
     b         : The right-hand-side vector.
     tol       : The tolerance below which singular values will
                 be ignored.  if w[j] < tol it will have not 
                 form part of the solution.
     pivot     : The pivot vector from decomp().


2.6  Output from svdsolve().

     svdsolve(): returns an unspecified integer value. It should
                 be ignored.
     x         : The solution vector x in Ax = b.
     flag      : flag =  0 : normal return
                 flag = -1 : could not allocate workspace.
                 flag = -2 : invalid user input.


3.0  Method.

     The function svd() decomposes the matrix by firstly  reducing 
A to a  bidiagonal  form  using  Housholder  reductions  and  then 
diagonalizing it using QR  transformations.   svdsolve()  performs 
the matrix multiplication x = v w  u  b.


4.0  References.

G.E. Forsythe, M.A. Malcolm, & C.B. Moler  : "Computer Methods for 
Mathematical Computations". Prentice-Hall, Englewood Cliffs,  N.J. 
1977.

Golub & Reinsch : Num. Math. 14, 403-420, 1970.


5.0  Example.

     Solve 1 1  2  2 1 1 x  1   1  5 1
           1 0  9  4 1 1 x  1 = 1 13 1  .
           1 1  7  2 1 1 x  1   1 10 1
           1 1  6  2               9


/* svdd.c
   Sample driver for svd() and svdsolve().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

#define  n   3
#define  m   4
#define  nm  n
#define  INDX(i, j)  (i) * nm + (j)
#define  MAX(a,b)    (((a) > (b)) ? (a) : (b))

main ()
{
static double a[n * m], b[m], x[n];
static double sigma[n], u[n * m], v[n * m];
int    i, j, flag;
double sigmax, tol;

b[0] = 5.0;
b[1] = 13.0;
b[2] = 10.0;
b[3] = 9.0;

a[INDX(0,0)] = 1.0;   a[INDX(0,1)] = 2.0;    a[INDX(0,2)] = 2.0;
a[INDX(1,0)] = 0.0;   a[INDX(1,1)] = 9.0;    a[INDX(1,2)] = 4.0;
a[INDX(2,0)] = 1.0;   a[INDX(2,1)] = 7.0;    a[INDX(2,2)] = 2.0;
a[INDX(3,0)] = 1.0;   a[INDX(3,1)] = 6.0;    a[INDX(3,2)] = 2.0;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nTest driver for svd() and svdsolve().\n\n");

svd (n, m, n, a, sigma, 1, u, 1, v, &flag);
printf ("%s\n", cmathmsg(SVD_C, flag));

if (flag == 0)
   {
   printf ("\nThe singular values are ...\n");
   for (j = 0; j < n; ++j) printf ("%10.3e\n", sigma[j]);
   printf ("\n");

   /* Find largest singular value. */
   sigmax = 0.0;
   for (j = 0; j < n; ++j) sigmax = MAX(sigmax, sigma[j]);
   tol = 1.0e-9 * sigmax;

   svdsolve (n, m, n, u, sigma, v, b, x, tol, &flag);
   printf ("%s\n\n", cmathmsg(SVDSOLVE_C, flag));

   printf ("Solution    =     [ ");
   for(i = 0; i < n; i++) printf ("%8.3f, ", x[i]);
   printf ("]\n");
   printf ("Correct answer is [    1.000,    1.000,    1.000, ]\n");
   }

return (0);
}
6.0  Program Results.

  --- CMATH --- Design Software 1989

Test driver for svd() and svdsolve().

svd() : normal return

The singular values are ...
  1.40e+01
  1.28e+00
  1.44e+00

svdsolve() : normal return

Solution    =     [    1.000,     1.00,     1.00, ]
Correct answer is [    1.000,    1.000,    1.000, ]


