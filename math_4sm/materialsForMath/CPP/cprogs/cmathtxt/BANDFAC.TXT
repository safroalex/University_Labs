------------------------------------------------------------------
Design Software                               bandfac(), bandslv()
------------------------------------------------------------------


1.0  Purpose.

     Solve the linear algebraic equation Ax = b by decomposing the 
banded matrix A into an upper-triangular  matrix  U  and  a  lower 
triangular matrix L (also  banded)  such  that  At=tLU.   To  save 
memory, only the nonzero bands of  the  matrix  are  stored.   For 
example, the matrix
     A  = 1                                    1  
is stored in the compact form
     A  = 1                        1  
The columns of the compact matrix contain the diagonal elements of 
the original banded matrix.  In general, A has nup bands above the 
diagonal, one main diagonal and nlow  bands  below  the  diagonal.  
Thus the element A[i][i+j] of the original  matrix  is  stored  as 
A[i][nlow+j]  in  the  compact  matrix  for   jt=t-nlow...0...nup, 
it=t0...n.


2.0  How to use the functions.

     The function bandfac() receives and returns  all  information 
via its formal arguments.  It is declared as 
     
     int bandfac (A, ndim, n, nlow, nup, flag)
     double *A;
     int    n, ndim, nlow, nup, *flag;

If bandfac() successfully decomposes A, bandslv() may  be  invoked 
to solve the system for any number of right-hand sides.  bandslv() 
is declared as 

     int bandslv (A, ndim, n, nlow, nup, b)
     double *A;
     int    ndim, n, nlow, nup;
     double b[];


2.1  Parameter types.

     A         : pointer to an array of double values with
                 dimension A[ndim*mdim], ndim > n, 
                 mdim > nlow+nup+1.
                 For some compilers, you may declare A as a two
                 dimensional array and address it as A[i][j]. 
                 Alternatively, A may be declared as a pointer to
                 a single dimensional array and be addressed as 
                 A[i*ndim + j].
     ndim      : integer value
     n         : integer value
     nlow      : integer value
     nup       : integer value
     flag      : pointer to an integer variable
     b         : pointer to a vector of double values with
                 dimension b[ndim], ndim > n


2.2  Input to bandfac().

     A         : The matrix to be decomposed.  You must store the 
                 elements of A in the compact storage arrangement
                 described in section 1.0.  The rows of A are
                 numbered 0 ... n-1.
     ndim      : The dimension of the rows of the compact matrix as 
                 defined in the calling program.  bandfac() needs 
                 this value to access the elements of A correctly.
     n         : The order of matrix A. n < ndim.
     nlow      : The number of bands (elements in one column) below 
                 the main diagonal.
     nup       : The number of bands above the main diagonal.
                 (The total bandwidth, nlow+1+nup must be smaller
                  than mdim.)


2.3  Output from bandfac().

     bandfac() : returns the same integer value as flag
     A         : The compact matrix is replaced with the upper
                 triangular matrix U and the the lower triangular 
                 matrix.
     flag      : Status indicator.
                 flag = 0 : normal return
                 flag = 1 : one of the diagonals was zero
                 flag = 2 : illegal user input (e.g. n<1, n>ndim,
                            nlow+1+nup > ndim, A == NULL, 
                            nlow < 0, nup < 0)
                 flag = 3 : The last diagonal element was zero
                            after the forward elimination step.  


2.4  Input to bandslv().

     A         : The factorized matrix from bandfac().
     n         : The order of matrix A. n < ndim.
     ndim      : The dimension of the rows of the compact matrix as 
                 defined in the calling program.
     nlow      : The number of bands below the main diagonal.
     nup       : The number of bands above the main diagonal.
     b         : The right-hand-side vector.  b[j], j=0...n-1


2.6  Output from bandslv().

     bandslv() : returns an unspecified integer value. It should
                 be ignored.
     b         : The solution vector x in Ax = b.  b[j], j=0...n-1


3.0  Method.

     The matrix is decomposed  using  Gaussian  elimination.   The 
multipliers  computed  by  bandfac()  and  used  in  the   forward 
elimination of A are stored as L.   The  function  bandslv()  uses 
these multipliers to perform the same elimination operations on  b 
and then solves the linear system using  back-substitution.   Note 
that partial pivoting is not used.


4.0  Reference

C. de Boor : "A Practical Guide to Splines."  Applied Mathematical 
Science 27, Springer-Verlag, New York, 1978.


5.0  Example.

/* bandfacd.c
   Example program to exercise banded matrix equation solver.
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

#define  ndim  20
#define  INDX(i, j)  (i) * ndim + (j)

main ()
{
static double a[ndim*ndim], b[ndim];
int    n, nlow, nup, i, flag;
double rhs;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample driver for bandfac() and bandslv()...\n");

n    = 15;
nlow = 1;
nup  = 2;

for (i = 0; i < n; ++i)
   {
   a[INDX(i,0)] = 1.0;
   a[INDX(i,1)] = 4.0;
   a[INDX(i,2)] = 1.0;
   a[INDX(i,3)] = 1.0;
   b[i]  = (double) (i+1);
   }
a[INDX(0,0)]   = 0.0;    /* ignored anyway */
a[INDX(n-2,3)] = 0.0;
a[INDX(n-1,2)] = 0.0;
a[INDX(n-1,3)] = 0.0;

bandfac (a, ndim, n, nlow, nup, &flag);
printf ("\n%s\n", cmathmsg(BANDFAC_C, flag));

if (flag == 0)
   {
   bandslv (a, ndim, n, nlow, nup, b);

   printf ("\nSolution ...\n");
   printf ("   j      x[i]       rhs[j]\n");
   printf ("-------------------------------\n");
   for (i = 0; i < n; ++i)
      {
      /* reconstruct right hand side */
      if (i == 0)        rhs = 4.0 * b[0] + b[1] + b[2];
      else if (i == n-2) rhs = b[n-3] + 4.0 * b[n-2] + b[n-1];
      else if (i == n-1) rhs = b[n-2] + 4.0 * b[n-1];
      else               rhs = b[i-1] + 4.0 * b[i] + b[i+1] + b[i+2];
      printf ("%3d  %10.5f  %10.5f\n", i, b[i], rhs);
      }
   }
return (0);
} /* ... end of main */


6.0  Program Results.

  --- CMATH --- Design Software 1989

Sample driver for bandfac() and bandslv()...

bandfac () : normal return.

Solution ...
   j      x[i]       rhs[j]
-------------------------------
  0     0.09137     1.00000
  1     0.24747     2.00000
  2     0.38703     3.00000
  3     0.53171     4.00000
  4     0.67270     5.00000
  5     0.81344     6.00000
  6     0.96404     7.00000
  7     1.10949     8.00000
  8     1.22092     9.00000
  9     1.37707    10.00000
 10     1.62975    11.00000
 11     1.64103    12.00000
 12     1.46289    13.00000
 13     2.34323    14.00000
 14     3.16419    15.00000

