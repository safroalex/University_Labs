------------------------------------------------------------------
Design Software                                               qr()
------------------------------------------------------------------


1.0  Purpose.

     Compute all of the eigenvalues, l, defined by Axt=tlx,  where 
A is a general real matrix.  The values of l may be complex.


2.0  How to use the function.

     The function qr() is used to compute the eigenvalues.  It  is 
declared as 
     
     int qr (ndim, n, A, wr, wi, flag)
     int    ndim, n;
     double *A, wr[], wi[];
     int    *flag;


2.1  Parameter types.

     ndim      : integer value
     n         : integer value
     A         : pointer to an array of double values with
                 dimension A[ndim*ndim], ndim > n.
     wr        : pointer to an array of double values with 
                 dimension wr[ndim], ndim > n.
     wi        : pointer to an array of double values with 
                 dimension wi[ndim], ndim > n.
     flag      : pointer to an integer variable


2.2  Input to qr().

     ndim      : The dimension of the rows of A in the calling 
                 program.
     n         : The order of the matrix A.  n < ndim.
     A         : The matrix to be analysed.


2.3  Output from qr().

     qr()      : returns an unspecified integer value which should
                 be ignored.
     A         : The contents of A are changed by qr().
     wr        : The real parts of the eigenvalues, l.
                 The eigenvalues are not in any particular order
                 however complex conjugate pairs will appear together
                 with eigenvalue having the positive imaginary 
                 part appearing first.
     wi        : The imaginary parts of the eigenvalues, l.
     flag      : A status indicator.
                 flag =  0, normal return.
                 flag = -1, could not allocate memory for work
                            space
                 flag = -2, incorrect user input. e.g. n > ndim,
                            n < 1, *A == NULL ...
                 flag >  0, more than 30 iterations were required
                            to determine an eigenvalue.  The 
                            eigenvalues in wr, wi are correct for
                            flag, flag+1, ... n-1, but no vectors
                            are computed.


2.6  Workspace.

     Arrays of n double elements and n integer elements  are  used 
internally by qr().


3.0  Method.

     qr()  first  balances  the  matrix,  A,  and   isolates   any 
eigenvalues if possible (function balanc()).  It then  converts  A 
to upper Hessenberg form (elmhes()) and determines the eigenvalues 
using the qr method.


4.0  References

     B.T. Smith, J.M. Boyle, J.J. Dongarra, Y. Ikebe, V.C.  Klema, 
C.B. Moler  :  "Matrix  Eigensystem  routines  -  EISPACK  guide."  
Lecture Notes in Computer Science, V.6, Springer-Verlag (1976).

     G. Peters & J.H Wilkinson : "Eigenvectors of real and complex 
matrices by LR and QR triangularizations."  Num. Math 16,  181-204 
(1970).


5.0  Example.

     Find the eigenvalues of the matrix

                u                       o
                1 4.0  -5.0   0.0   3.0 1
                1 0.0   4.0  -3.0  -5.0 1
                1 5.0  -3.0   4.0   0.0 1
                1 3.0   0.0   5.0   4.0 1
                m                       .

/* qrd.c
   Sample driver for qr().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
#define  nm  4
#define  INDX(i, j)  (i) * nm + (j)
static double a[nm * nm], wr[nm], wi[nm];
int    n, flag, j;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nSample program for qr() eigenvalue solver.\n");

n  = 4;
a[INDX(0,0)] =  4.0;  a[INDX(0,1)] = -5.0;
a[INDX(0,2)] =  0.0;  a[INDX(0,3)] =  3.0;
a[INDX(1,0)] =  0.0;  a[INDX(1,1)] =  4.0;
a[INDX(1,2)] = -3.0;  a[INDX(1,3)] = -5.0;
a[INDX(2,0)] =  5.0;  a[INDX(2,1)] = -3.0;
a[INDX(2,2)] =  4.0;  a[INDX(2,3)] =  0.0;
a[INDX(3,0)] =  3.0;  a[INDX(3,1)] =  0.0;
a[INDX(3,2)] =  5.0;  a[INDX(3,3)] =  4.0;

qr (nm, n, a, wr, wi, &flag);
printf ("\n%s\n", cmathmsg(QR_C, flag));

if (flag == 0)
   {
   printf ("\nEigenvalues...\n");
   for (j = 0; j < n; ++j)
      printf ("(%6.2f, %6.2f)\n",wr[j], wi[j]);
   printf ("\nCorrect eigenvalues 12.0, 1.0+-5i & 2.0\n");
   }

return (0);
}  /* end of main() */


6.0  Program Results.

  --- CMATH --- Design Software 1989

Sample program for qr() eigenvalue solver.

qr() : normal return

Eigenvalues...
( 12.00,   0.00)
(   1.0,   5.00)
(   1.0,  -5.00)
(  2.00,   0.00)

Correct eigenvalues 12.0, 1.0+-5i & 2.0



