------------------------------------------------------------------
Design Software                                              dft()
------------------------------------------------------------------


1.0  Purpose.

     Compute the discrete Fourier transform of a complex array
z  = zr  + i zi , k = 0 ... N-1, i  = -1.  The  forward  transform 
is defined as
     Z(n) = ------   S   z  . e             ,
while the inverse transform is defined as
     z(k) = ------   S   Z  . e              .
The value of N is not restricted to being an integer power of 2.


2.0  How to use the function.

     The function chirp() needs to be  called  first  to  set  the 
transform weights.  Once set, these weights may be  used  for  any 
number of  transforms  of  the  same  working  length  (n2).   The 
functions are declared as 

     int chirp (n, n2, wr, wi, flag)
     int    n, n2;
     double wr[], wi[];
     int *flag;
     
     int dft (n, n2, zr, zi, wr, wi, direct, flag)
     int    n, n2;
     double zr[], zi[], wr[], wi[];
     int direct, *flag;


2.1  Parameter types.

     n         : integer value
     n2        : integer value
     zr        : pointer to a vector of double values
     zi        : pointer to a vector of double values
     wr        : pointer to a vector of double values
     wi        : pointer to a vector of double values
     direct    : integer value
     flag      : pointer to an integer variable


2.2  Input to chirp().

     n         : The number of elements in the z arrays (N).
                 This need not be a power of 2.
     n2        : The working length of the transforms. The
                 constraints on n2 are  n2 >= 2 * n,  
                 n2 is an integer power of 2, n2 <= 2  .

2.3  Output from chirp().

     chirp()   : returns an unspecified integer value which
                 should be ignored.
     wr[], wi[]: Real and imaginary components of the transform
                 weights.  These arrays must have at least n2
                 elements (0 ... n2-1).
     flag      : A status indicator.
                 flag = 0, normal return
                 flag = 1, invalid user input. e.g. n < 2, 
                           n2 > 2  , wr == NULL, wi == NULL. 
                 flag = 2, n2 not an integer power of 2.


2.4  Input to dft()

     n         : The number of elements in z (N).
     n2        : The working length of the transforms.  The
                 constraints on n2 are  n2 >= 2 * n,  n2 
                 is an integer power of 2, n2 <= 2  .
     zr[]      : The real part of the complex array.
                 zr[k], k = 0 ... n-1.
     zi[]      : The imaginary part of the complex array.
                 zi[k], k = 0 ... n-1.
     wr[]      : Real part of the weights as supplied by chirp().
     wi[]      : Imaginary parts of the weights.
     direct    : The direction of the transformation.
                 = +1, forward transform computed.
                 = -1, inverse transform computed.


2.5  Output from dft().

     dft()     : returns an unspecified integer value which
                 should be ignored.
     zr[]      : The real part of the transformed array.
     zi[]      : The imaginary part of the transformed array.
                 The ordering of the z arrays are as follows...
                 index   time domain   frequency domain
                   k           t =             f =
                 -----------------------------------------
                   0              0                0
                   1              D             1/ND
                   2             2D             2/ND
                   ...
                   N/2-1   (N/2-1)D       (N/2-1)/ND
                   N/2       (N/2)D            +1/ND
                   N/2+1   (N/2+1)D      -(N/2-1)/ND
                   ...
                   N-2       (N-2)D            -2/ND
                   N-1       (N-1)D            -1/ND
                 -----------------------------------------
     flag      : A status indicator.
                 flag = 0, normal return
                 flag = 1, invalid user input. e.g. n < 2, 
                           n2 > 2  , zr == NULL, zi == NULL,
                           wr == NULL, wi == NULL. 
                 flag = 2, n2 not an integer power of 2 or
                           n2 < 2 * n.
                 flag = 3, direct not +1 or -1.


3.0  Method.

     The forward transform is expressed as
     Z(n) = ------ e          { z  e          w e         }  ,
n = 0 ... N-1, where w denotes convolution of the  two  series  in 
brackets.  A standard fast Fourier transform, fft(),  is  used  to 
perform the convolutions efficiently.


4.0  Reference

D.M. Monro & J.L. Branch : "The Chirp discrete  Fourier  transform 
of general length."  Applied Statistics 26(3), 351-361 (1977).

L.R. Rabiner, R.W. Schaffer & C.M. Rader : "The Chirp  Z-transform 
and  its  applications."   Bell  Systems  Technical  Journal   48, 
1249-1292 (1969).


5.0  Example.

     Transform the time sequence 
     z  = sin(2pj/N) + i 0.0,  j = 0 ... N-1, N = 17.
then take the inverse transform and compute the accumulated error.

/* dftd.c
   Exercise the Discrete Fourier transform routine.   */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
int    j, n, n2, flag, direct;
#define  ndim  64
static double zr[ndim], zi[ndim], wr[ndim], wi[ndim];
static double rr[ndim], ri[ndim], t, rmean, rmax;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise Fourier transform routine dft().\n");

printf ("\nTime domain data ...\n");
n  = 17;
n2 = 64;
for (j = 0; j < n; ++j)
   {
   zr[j] = sin (6.283185 * ((double) j) / ((double) n));
   zi[j] = 0.0;
   rr[j] = zr[j];  ri[j] = zi[j];
   printf ("(%6.3f,%6.3f), ", zr[j], zi[j]);
   if (j % 4 == 0) printf ("\n");
   }
printf ("\n");

printf ("Set the Chirp function weights.\n");
chirp (n, n2, wr, wi, &flag);
printf ("%s\n\n", cmathmsg(CHIRP_C, flag));

if (flag == 0)
   {
   printf ("\nForward transform ...\n");
   direct = 1;
   dft (n, n2, zr, zi, wr, wi, direct, &flag);
   printf ("%s\n\n", cmathmsg(DFT_C, flag));

   if (flag == 0)
      {
      for (j = 0; j < n; ++j)
         {
         printf ("(%6.3f,%6.3f), ", zr[j], zi[j]);
         if (j % 4 == 0) printf ("\n");
         }
      printf ("\n");

      printf ("\nInverse transform ...\n");
      direct = -1;
      dft (n, n2, zr, zi, wr, wi, direct, &flag);
      printf ("%s\n\n", cmathmsg(DFT_C, flag));
      rmax  = 0.0;
      rmean = 0.0;
      for (j = 0; j < n; ++j)
         {
         rr[j] -= zr[j];  ri[j] -= zi[j];
         t = fabs(rr[j]);
         rmax = (t > rmax) ? t : rmax; rmean += t;
         t = fabs(ri[j]);
         rmax = (t > rmax) ? t : rmax; rmean += t;
         }
      rmean /= (double) n;
      printf ("Maximum error = %10.2e\n", rmax);
      printf ("Mean error    = %10.2e\n", rmean);
      printf ("\n");
      }
   }

return (0);
}  /* end of dftd.c */


6.0  Program Results.


  --- CMATH --- Design Software 1989

Exercise Fourier transform routine dft().

Time domain data ...
( 0.000, 0.000), 
( 0.361, 0.000), ( 0.674, 0.000), ( 0.895, 0.000), ( 0.996, 0.000), 
( 0.962, 0.000), ( 0.798, 0.000), ( 0.526, 0.000), ( 0.184, 0.000), 
(-0.184, 0.000), (-0.526, 0.000), (-0.798, 0.000), (-0.962, 0.000), 
(-0.996, 0.000), (-0.895, 0.000), (-0.674, 0.000), (-0.361, 0.000), 

Set the Chirp function weights.
chirp() : normal return


Forward transform ...
dft() : normal return

( 0.000,-0.000), 
(-0.000,-2.062), ( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), 
( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), ( 0.000,-0.000), 
( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), 
( 0.000, 0.000), ( 0.000, 0.000), ( 0.000, 0.000), (-0.000, 2.062), 


Inverse transform ...
dft() : normal return

Maximum error =    1.7e-15
Mean error    =    1.0e-15




