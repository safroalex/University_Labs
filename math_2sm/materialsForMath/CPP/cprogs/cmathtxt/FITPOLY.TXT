------------------------------------------------------------------
Design Software                                          fitpoly()
------------------------------------------------------------------


1.0  Purpose.

     Compute  a  least-squares  polynomial  approximation  to   an 
arbitrary set of data points (x ,ty ), kt=t0t...tn.   We  minimize 
the merit function
     f =  S  w  (y(x ) - y )    ,
where w  is is a weight assigned to data point k and y(x) is given 
by the Chebyshev polynomial series 
     y(x) =   S  c  T (z)  +  c /2   .
Here z = -----------------  , T  = cos (j arccos(z)).


2.0  How to use the functions.

     fitpoly() is used to fit the coefficients,  c ,  jt=t0t...tm, 
to the user supplied data points.  It is declared as
     
     int fitpoly (nd, x, y, w, a, b, m, c, flag)
     int    nd;
     double x[], y[], w[];
     double a, b;
     int m;
     double c[];
     int    *flag;

If fitpoly() successfully computes the coefficients,  then  cheby() 
may be used to evaluate the series any number  of  times.


2.1  Parameter types.

     nd        : integer value
     x         : pointer to a vector of double values
     y         : pointer to a vector of double values
     w         : pointer to a vector of double values
     a         : double value
     b         : double value
     m         : integer value
     c         : pointer to a vector of double values
     flag      : pointer to an integer variable


2.2  Input.

     nd        : The number of data points.  These are numbered
                 0 ... nd-1.
     x         : x-coordinates of the data points.  There is no
                 particular order required.
     y         : y-coordinates of the data points.
     w         : User assigned weights for the data.  The weight
                 should be inversely proportional to the square
                 of the absolute error of the y[k].  This error
                 could be specified as standard deviations.  If
                 error estimates are not available, just set all
                 weights to 1.
     a         : Lower bound on x.
     b         : Upper bound on x.
                 Note that the series approximation is only valid
                 over the range a < x < b.
     m         : Order of the fitted polynomial.  
                 If you are not sure of what value to use, start 
                 with small m and monitor the returned value of
                 the merit function as m is sequentially
                 increased by 1.  Use  the value of ns that
                 provided the last significant decrease in sums.
                 In general, it is better to keep m small.


2.3  Output.

     fitpoly   : returns an unspecified integer value which should
                 be ignored.
     c         : The series coefficients, c[0] ... c[n-1].
     flag      : A status indicator.
                 flag = 0 : normal return
                 flag = 1 : illegal value for nd, ns
                            (i.e. nd < 1, m < 1)
                 flag = 2 : x[] values are not in [a, b]
                 flag = 3 : not all of the weights are positive
                 flag = 4 : could not allocate memory for
                            workspace
                 flag = 5 : solution for c[] failed.


2.4  Workspace.

     fitpoly() allocates  a  work  space  of  (nd*mt+tm*m)  double 
elements and m integer elements while decomp(), which is called by 
fitpoly(), allocates a further m double elements.


3.0  Method.

     The normal equations
  S  c  1  S  w  T (x ) T (x ) 1  =  S  w  y  T (x )  , i = 0...m, 
are set up using the Chebyshev polynomials, T , jt=t0...m  as  the 
basis functions.  These equations are generally  well  conditioned 
so we use decomp() to solve for the coefficeints c , j = 0 ... m.


4.0  Reference.

W. Cheny & D. Kincaid :  "Numerical  Mathematics  and  Computing."  
Brooks/Cole Publishing Company, Monterey, 1980.


5.0  Example.

     The following sample program fits a polynomial of order 6  to 
the set of data points contained in the arrays x[] and  y[].   The 
result  produced  by  this  program  can  be  compared  with   the 
cubic-spline fitted by fitspl().


/* fitpolyd.c
   Sample driver for Chebyshev polynomial fitting routine.
   */

#include <math.h>
#include <stdio.h>
#include "cmath.h"

main ()
{
int    i, flag;
double sums, yy;
#define  nd  28
double x[nd], y[nd], w[nd];
#define  m  7
double a, b, c[m];

/* Data points, (x, y) and weight */

x[0] = 0.20;  x[1] = 0.34;  x[2] = 0.47;  x[3] = 0.60;
x[4] = 0.74;  x[5] = 0.90;  x[6] = 1.09;  x[7] = 1.32;
x[8] = 1.60;  x[9] = 1.70;  x[10] = 1.90; x[11] = 2.25;
x[12] = 2.60; x[13] = 2.95; x[14] = 3.10; x[15] = 3.65;
x[16] = 4.00; x[17] = 4.66; x[18] = 5.15; x[19] = 5.64;
x[20] = 6.17; x[21] = 7.00; x[22] = 8.00; x[23] = 9.00;
x[24] = 10.0; x[25] = 11.0; x[26] = 12.0; x[27] = 13.0;

y[0] = 0.00;  y[1] = 1.00;  y[2] = 2.00;  y[3] = 3.00;
y[4] = 4.00;  y[5] = 5.00;  y[6] = 6.00;  y[7] = 7.00;
y[8] = 8.00;  y[9] = 8.24;  y[10] = 8.62; y[11] = 9.00;
y[12] = 9.10; y[13] = 9.00; y[14] = 8.90; y[15] = 8.50;
y[16] = 8.15; y[17] = 7.50; y[18] = 7.00; y[19] = 6.50;
y[20] = 6.00; y[21] = 5.30; y[22] = 4.54; y[23] = 3.89;
y[24] = 3.39; y[25] = 2.96; y[26] = 2.56; y[27] = 2.20;

w[0] = 0.20;   w[1] = 0.20;   w[2] = 0.20;   w[3] = 0.20;
w[4] = 0.30;   w[5] = 0.50;   w[6] = 0.70;   w[7] = 0.80;
w[8] = 0.90;   w[9] = 1.00;   w[10] = 1.00;  w[11] = 1.00;
w[12] = 1.00;  w[13] = 1.00;  w[14] = 1.00;  w[15] = 0.90;
w[16] = 0.80;  w[17] = 0.70;  w[18] = 0.50;  w[19] = 0.60;
w[20] = 0.70;  w[21] = 0.90;  w[22] = 1.00;  w[23] = 1.00;
w[24] = 1.00;  w[25] = 1.00;  w[26] = 1.00;  w[27] = 1.00;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nTest program for fitpoly().\n");

a = 0.2;
b = 13.0;
fitpoly (nd, x, y, w, a, b, m, c, &flag);
printf ("%s\n", cmathmsg(FITPOLY_C, flag));

if (flag == 0)
   {
   printf ("\nFitted Chebyshev coefficients ...\n");
   printf ("    i       c[i]   \n");
   printf ("-------------------\n");

   for (i = 0; i < m; ++i)
      printf ("%5d  %10.3f\n", i, c[i]);

   printf ("\n    i     x[i]      y[i]      w[i]     cheby\n");
   printf ("-----------------------------------------------\n");

   sums = 0.0;
   for (i = 0; i < nd; ++i)
      {
      yy = cheby (x[i], a, b, c, m, &flag);
      if (flag != 0) printf ("%s\n", cmathmsg(CHEBY_C, flag));
      printf ("%5d %9.3f %9.3f %9.3f %9.3f\n",
               i, x[i], y[i], w[i], yy);
      yy -= y[i];
      sums += w[i] * yy * yy;
      }
   sums /= (double) nd;
   printf ("\nweighted sum of residuals = %10.2e\n", sums);
   }

return (0);
}


6.0  Program Results.

  --- CMATH --- Design Software 1989

Test program for fitpoly().
fitpoly() : normal return

Fitted Chebyshev coefficients ...
    i       c[i]   
-------------------
    0       9.070
    1      -1.431
    2      -2.195
    3       2.196
    4      -1.294
    5       0.543
    6      -0.155

    i     x[i]      y[i]      w[i]     cheby
-----------------------------------------------
    0     0.200     0.000     0.200    -0.417
    1     0.340     1.000     0.200     0.969
    2     0.470     2.000     0.200     2.121
    3     0.600     3.000     0.200     3.153
    4     0.740     4.000     0.300     4.139
    5     0.900     5.000     0.500     5.121
    6     1.090     6.000     0.700     6.103
    7     1.320     7.000     0.800     7.057
    8     1.600     8.000     0.900     7.919
    9     1.700     8.240     1.000     8.157
   10     1.900     8.620     1.000     8.537
   11     2.250     9.000     1.000     8.942
   12     2.600     9.100     1.000     9.083
   13     2.950     9.000     1.000     9.029
   14     3.100     8.900     1.000     8.961
   15     3.650     8.500     0.900     8.553
   16     4.000     8.150     0.800     8.211
   17     4.660     7.500     0.700     7.497
   18     5.150     7.000     0.500     6.966
   19     5.640     6.500     0.600     6.463
   20     6.170     6.000     0.700     5.962
   21     7.000     5.300     0.900     5.271
   22     8.000     4.540     1.000     4.558
   23     9.000     3.890     1.000     3.932
   24    10.000     3.390     1.000     3.382
   25    11.000     2.960     1.000     2.930
   26    12.000     2.560     1.000     2.577
   27    13.000     2.200     1.000     2.198

weighted sum of residuals =    3.8e-03



