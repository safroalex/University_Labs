------------------------------------------------------------------
Design Software                                           invert()
------------------------------------------------------------------


1.0  Purpose.

     Invert a matrix A using Gaussian elimination.


2.0  How to use the functions.

     The function invert() is declared as 
     
     int invert (n, ndim, A, Ainv, flag)
     int    n, ndim;
     double *A, *Ainv;
     int    *flag;


2.1  Parameter types.

     n         : integer value
     ndim      : integer value
     A         : pointer to an array of double values with
                 dimension A[ndim*ndim], ndim > n.
                 For some compilers you may declare A as a two
                 dimensional array and address it as A[i][j].
                 Alternatively, A may be declared as a pointer to
                 a single dimensional array and be addressed as
                 A[i*ndim + j].
     Ainv      : pointer to an array of double values with
                 dimensions A[ndim*ndim], ndim > n.
     flag      : pointer to an integer variable


2.2  Input to decomp().

     n         : The order of matrix A. n < ndim.
     ndim      : The dimension of the rows of A (and Ainv) as 
                 defined in the calling program.
     A         : The matrix to be inverted.


2.3  Output from decomp().

     invert()  : returns an unspecified integer value. It should
                 be ignored.
     A         : The original matrix is overwritten.
     Ainv      : The inverse of A.
     flag      : Status indicator.
                 flag = 0 : normal return
                 flag = 1 : A is singular (to working precision).
                 flag = 2 : could not allocate memory for
                            workspace
                 flag = 3 : invalid parameters
                            n < 1, n > ndim, A == NULL, 
                            Ainv == NULL


2.4  Workspace for invert().

     A vector of n double elements  and  a  vector  of  n  integer 
elements  are  allocated  by  invert().   The  function   decomp() 
allocates a further n double elements.


3.0  Method.

     The function decomp() is used to  decompose  A.   solve()  is 
then used to build up the inverse, one column at a time, from  the 
identity matrix.


4.0  Reference

W.H. Press, B.P. Flannery, S.A.  Teukolsky  &  W.T.  Vetterling  : 
"Numerical Recipes.  The art of scientific computing."   Cambridge 
University Press, Cambridge, 1986.


5.0  Example.

     Solve 1 1  2  2 1 1 x  1   1  5 1
           1 3  4  5 1 1 x  1 = 1 12 1  .
           1 1  7  2 1 1 x  1   1 10 1

/* invertd.c
   Sample driver for invert().
*/

#include <math.h>
#include <stdio.h>
#include "cmath.h"

#define mdim 10
#define INDX(i, j)  (i) * mdim + (j)
#define MAX(a, b)   (((a) > (b)) ? (a) : (b))

main ()
{
static double a[mdim * mdim], ainv[mdim * mdim], b[mdim];
double t, cond, aL1, ainvL1;
int n, i, j, flag;

n = 3;
b[0]    = 5.0; b[1]    = 12.0; b[2]    = 10.0;

a[INDX(0,0)] = 1.0; a[INDX(0,1)] = 2.0;  a[INDX(0,2)] = 2.0;
a[INDX(1,0)] = 3.0; a[INDX(1,1)] = 4.0;  a[INDX(1,2)] = 5.0;
a[INDX(2,0)] = 1.0; a[INDX(2,1)] = 7.0;  a[INDX(2,2)] = 2.0;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nTest driver for invert().\n");
invert (n, mdim, a, ainv, &flag);
printf ("\n%s\n", cmathmsg(INVERT_C, flag));

if (flag == 0)
   {
   /* Now, use inverse to solve equations */
   printf ("\nSolution    =     [ ");
   for(i = 0; i < n; i++)
      {
      t = 0.0;
      for (j = 0; j < n; ++j) t += ainv[INDX(i,j)] * b[j];
      printf ("%8.3f, ", t);
      }
   printf ("]\n");
   printf ("Correct answer is [    1.000,    1.000,    1.000, ]\n");

   /* compute condition number using L1 norms */
   aL1 = 0.0;
   ainvL1 = 0.0;
   for (i = 0; i < n; ++i)
      {
      for (j = 0; j < n; ++j)
         {
         aL1    = MAX(fabs(a[INDX(i,j)]), aL1);
         ainvL1 = MAX(fabs(ainv[INDX(i,j)]), ainvL1);
         }
      }
   cond = aL1 * ainvL1;
   printf ("\nCondition number = %e\n", cond);
   }

return (0);
}


6.0  Program Results.

  --- CMATH --- Design Software 1989

Test driver for invert().

invert() : normal return

Solution    =     [     1.00,     1.00,    1.000, ]
Correct answer is [    1.000,    1.000,    1.000, ]

Condition number = 3.06000e+01



