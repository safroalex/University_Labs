------------------------------------------------------------------
Design Software                       stint0(), stint1(), stint3()
------------------------------------------------------------------


1.0  Purpose.

     Integrate the  set  of  simultaneous,  first-order,  ordinary 
differential equations (ODE's)
     -- = f(x, y)      ,
starting from the initial  condition  y(x ).   The  integrator  is 
designed to produce solutions to stiff sets of equations.  


2.0  How to use the functions.

     The main routine is stint1() (which calls stint2() to do  all 
of the hard work).  Before using  stint1(),  the  user  must  call 
stint0() to allocate the workspace arrays and set some  constants.  
The function stint1() may then be called several times to continue 
a solution over a number of time steps.   To  free  the  allocated 
workspace, call stint3().   If  the  number  of  ODE's  is  to  be 
increased, then the workspace must be freed using stint3() and new 
workspace allocated using stint0().   The  user  should  not  call 
stint2() directly.

     The functions are declared as 

     int stint0 (n, fail)
     int n, *fail;

     int stint1 (n, y, x1, x2, dx, relerr, mf, nfe, nje, flag,
                 f, jacob)
     int    n;
     double y[], *x1, x2, dx, relerr;
     int    mf, *nfe, *nje, *flag;
     int    (*f)(), (*jacob)();

     int stint3 ()


2.1  Parameter types.

     n         : integer value
     fail      : pointer to an integer variable
     y         : pointer to a vector of double elements
     x1        : pointer to a double variable
     x2        : double value
     dx        : double value
     relerr    : double value
     mf        : integer value
     nfe       : pointer to an integer variable
     nje       : pointer to an integer variable
     flag      : pointer to an integer variable
     f         : pointer to a user supplied function
                 int f (n, x, y, ydot)
                 int    n;
                 double x, y[], ydot[];
                 {
                 yp[] = ...
                 return (0);
                 }
     jacob     : pointer to a user supplied function
                 int jacob (n, x, y, jac)
                 int n;
                 double x, y[], jac[];
                 {
                 jac[] = ...
                 return (0);
                 }



2.2  Input to stint0().

     n         : The number of ODE's.


2.3  Output from stint0().

     stint0()  : returns an unspecified integer value which should
                 be ignored.
     fail      : Status indicator
                 fail = 0 : normal return
                 fail = 1 : Illegal value for n. (n < 1)
                 fail = 2 : Could not allocate memory for 
                            workspace.  

     Do not use stint1() if fail is nonzero.


2.4  Input to stint1().

     n         : The number of ODE's.
     y         : The starting values of y[i], i = 0 .. n-1, at x1.
     x1        : The starting value of the independent variable.
     x2        : The final value at which the solution is desired.
     dx        : The initial step size.
     relerr    : Relative error tolerance for the local error
                 test.
     mf        : Method flag.  
                 mf = 1,  The user must supply the Jacobian.
                 mf = 2,  The user need not supply the Jacobian.
     f         : User supplied function to evaluate the
                 derivatives ydot[i] = dy[i]/dx, i = 0 .. n-1.
     jacob     : User supplied function to evaluate the system
                 Jacobian (i.e. the set of partial derivatives 
                 of the ODE's) and stores it in jac[].  Thus
                 jac[i*n + j] is the partial derivative of ydot[i]
                 with respect to y[j], for i,j = 0 ... n-1.
                 If the analytic expressions for the partial
                 derivatives are not available, their approximate
                 values can be obtained by numerical differencing
                 (set mf = 2).  The function jacob() still needs to
                 exist but may not do anything.


2.5  Output from stint1().

     y         : Solution vector at x1.
     x1        : The independent variable; final value reached.
     nfe       : The number of function evaluations used.
     nje       : The number of Jacobian evaluations used.
     flag      : Integration status indicator.
                 flag > 0,  The integration was successful.
                 flag = -2, -3, -4, then 2, 3 or 4 points 
                    respectively have been computed with a
                    small step size but the requested error
                    could not be achieved.
                 flag = -5, The requested error is smaller than
                    can be handled for this problem.
                 flag = -6, Corrector convergence could not be
                    achieved.


2.6  Workspace for stint1().

     Workspace consisting of (50 + n) * n double  elements  and  n 
integer elements is allocated internally.


3.0  Method.

     The function  stint1()  uses  a  cyclic  composite  multistep 
method   together  with  an  adaptive   step-size   and   variable 
integration order algorithm as described in Tendler et al. 


4.0  Reference

     J.M. Tendler, T.A. Bickart & Z. Picel 1978 :  "Algorithm  534 
STINT:  STiff  (differential  equations)  INTegrator".   Collected 
Algorithms of the ACM.

     J.M. Tendler, T.A. Bickart &  Z.  Picel  1978  :  "A  stiffly 
stable integration process using cyclic  composite  methods".  ACM 
Trans. Math. Software Vol.4 (4), 339-368.


5.0  Example.

     Integrate  d  1 y 1   1  998   1998 1 1 y  1 
                dx 1 y     1 -999  -1999 1 1 y  1   ,
from x = 0 to x = 2 starting with   1 y 1   1 1 1 
                                    1 y     1 0 1   .


/* stintd.c
   Sample driver for stiff ODE integrator, stint1().
   */

#include <stdio.h>
#include <math.h>
#include "cmath.h"

main ()
{
int    n, mf, fail, flag, nfe, nje, totfe, totje;
double x1, x2, dx, relerr, y[2];
int    f (), jacob (), step;

n      = 2;
mf     = 1;
dx     = 3.0e-5;
relerr = 1.0e-5;
y[0]   = 1.0;
y[1]   = 0.0;
totfe  = 0;
totje  = 0;

printf ("\n\n  --- CMATH --- Design Software 1989\n");
printf ("\nExercise the stiff ODE solver stint1().\n");

stint0 (n, &fail);
printf ("\n%s\n\n", cmathmsg(STINT0_C, fail));

if (fail == 0)
   {
   printf ("\n      x          y[0]        y[1]\n");
   printf ("----------------------------------------\n");

   for (step = 1; step <= 5; ++step)
      {
      x2 = 0.4 * step;
      x1 = x2 - 0.4;
      stint1 (n, y, &x1, x2, dx, relerr, mf,
              &nfe, &nje, &flag, f, jacob);
      if (flag < 0) break;
      printf (" %10.5f %11.6f %11.6f\n", x1, y[0], y[1]);
      totfe += nfe;
      totje += nje;
      }

   stint3 ();

   printf ("\nCorrect answer at x = 2.0 is ...\n");
   printf ("y[0] = 0.270671,     y[1] = -0.135335\n");
   printf ("y[0] = 2 * exp(-x),  y[1] = -exp(-x)\n");

   printf ("\n%s\n", cmathmsg (STINT1_C, flag));
   printf ("total nfe = %d,  total nje = %d\n", totfe, totje);
   }

return (0);
}



int f (n, x, y, ydot)
int    n;
double x, y[], ydot[];

{
ydot[0] =  998.0 * y[0] + 1998.0 * y[1];
ydot[1] = -999.0 * y[0] - 1999.0 * y[1];
return (0);
}



int jacob(n, x, y, jac)
int    n;
double x, y[], jac[];
{
jac[0] = 998.0;
jac[1] = 1998.0;
jac[2] = -999.0;
jac[3] = -1999.0;
return (0);
}


6.0  Program Results.

  --- CMATH --- Design Software 1989

Exercise the stiff ODE solver stint1().

stint0() : normal return


      x          y[0]        y[1]
----------------------------------------
    0.40000    1.340705   -0.670352
    0.80000    0.898741   -0.449371
    1.20000    0.602464   -0.301232
    1.60000    0.403855   -0.201928
    2.00000    0.270717   -0.135359

Correct answer at x = 2.0 is ...
y[0] = 0.270671,     y[1] = -0.135335
y[0] = 2 * exp(-x),  y[1] = -exp(-x)

stint1() : normal return
total nfe = 262,  total nje = 30

Each call to stint1() restarts the integrator at the lowest order.  
If the range 0 < x < 2 is covered in one step, nfe = 160 and nje = 
12.
